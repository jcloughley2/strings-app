# LLM Instructions for Strings App

## About This Document

**PURPOSE**: Comprehensive reference guide for LLM agents working on the Strings application. Contains architecture, functionality, and implementation patterns for maintaining consistency.

**MAINTENANCE**: Keep updated with changes. Essential for future development work.

---

## Application Overview

**Application Name**: Strings  
**Purpose**: Web application for managing dynamic text content with a file-system-like structure where every string is a variable that can be referenced hierarchically.

### Core Concept: File System Analogy

- **Strings = Files**: Each string has content and a unique name/hash, can be referenced
- **Conditionals = Directories**: Containers holding multiple related string "files" (spawns)  
- **Variable References = File Includes**: Strings embed other strings using `{{variableName}}` syntax
- **Cascading Drawers = Deep Navigation**: Click nested variables to drill down with stacked editors

### Key Features

- **Every String is a Variable**: Automatic variable creation with 6-character hash or custom name
- **Variable Embedding**: Recursive `{{variableName}}` references with circular protection
- **Conditionals**: Convert strings to directories containing multiple variations (spawns)
- **Dimension Inheritance**: Strings automatically inherit metadata from embedded variables
- **Cascading Editing**: Deep nested editing with stacked drawer system
- **Root-Level Interface**: Clean view showing only top-level (non-embedded) strings
- **Real-time Variable Detection**: Yellow boxes for new variables, purple for existing

---

## Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router, Tailwind CSS, ShadCN/UI
- **State**: React useState/useEffect, cookie-based auth
- **Pattern**: Null-safe operations (`project?.strings`)

### Backend (Django)
- **Location**: `/backend/`  
- **Framework**: Django with DRF, SQLite, session auth
- **Pattern**: Comprehensive validation with meaningful errors

---

## Data Models

### Core Models
1. **Project**: Container for all content (name, description, user)
2. **Trait**: Context definitions for variable values (name, project) 
3. **Variable**: Traditional trait variables (name, project, is_conditional)
4. **VariableValue**: Trait-specific values (variable, trait, value)
5. **String**: The "file" system - every string is automatically a variable
   - Fields: content, project, variable_name (optional), variable_hash (auto), is_conditional, is_conditional_container
   - **Effective Variable Name**: Returns variable_name || variable_hash
6. **Dimension**: Categories for organizing strings (name, project)
7. **DimensionValue**: Predefined values for dimensions
8. **StringDimensionValue**: Automatic inheritance from embedded variables
9. **VariableDimensionValue**: Dimension-specific variable values

### Key Relationships
- Strings reference other strings via `{{variableName}}` embedding
- Conditionals contain spawns (multiple string variations)
- Automatic dimension inheritance through variable references
- Circular reference protection prevents infinite loops

---

## String Variable System

### Every String is a File
- **Automatic Variables**: Every string becomes a variable (no opt-in)
- **Dual Naming**: 6-char auto hash (e.g. "A7B2K9") OR custom name
- **Purple Badges**: Display `{{effectiveVariableName}}` with copy functionality
- **File Behavior**: Can be referenced, inherit properties, exist independently

### Conditionals (Directory System)  
- **Convert Any String**: Turn into container with multiple spawns
- **Automatic Setup**: Creates dimension and spawns with `{name}_1`, `{name}_2` pattern
- **Idempotent**: Safe to retry operations without duplicates

### Variable Embedding
- **Syntax**: `{{variableName}}` in any content
- **Recursive**: Supports A→B→C chains with 10-level depth limit
- **Mixed Types**: Embed both trait and string variables
- **Context-Aware**: Uses current filter selections

---

## User Interface

### Layout (Three Panels)
- **Left**: Filter Sidebar (360px) - dimensions, traits, conditionals
- **Center**: Main Canvas - root-level strings only, semantic toggles
- **Right**: Variables Sidebar (collapsible) - trait variable management

### Cascading Drawer System ⭐
**NEW FEATURE**: Deep nested editing with stacked drawers

#### Variable Detection Boxes
- **Yellow Boxes**: New variables detected in content (`{{newVariable}}`) 
  - Shows "New variable!" badge
  - Click to create and edit in cascading drawer
- **Purple Boxes**: Existing variables referenced in content  
  - Shows content preview
  - Click to edit in cascading drawer

#### Drawer Behavior
- **Stacking**: Each nested variable opens drawer on top of previous
- **No Sliding**: Simple z-index stacking (removed complex animations)
- **Individual Save/Cancel**: Each drawer has own controls
- **Auto-save on Cancel**: Temporary strings saved even when cancelled
- **Unlimited Depth**: Support infinite nesting levels

#### Navigation Flow
```
Main String (Edit Drawer)
  ↓ Click {{nestedVar}}
Nested String 1 (Stacked Drawer)  
  ↓ Click {{deeperVar}}
Nested String 2 (Stacked Drawer)
  ... unlimited depth
```

### String Editing Interface
- **Three Tabs**: Content, Dimensions, Advanced
- **Variable Name Display**: Shows at top with type badges
- **Real-time Detection**: Variables appear as boxes below content
- **ShadCN Close Buttons**: Single X button (removed custom duplicates)

---

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login
- `POST /api/auth/logout/` - Logout  
- `POST /api/auth/register/` - Register
- `GET /api/auth/me/` - Current user

### Projects
- `GET /api/projects/` - List projects
- `POST /api/projects/` - Create project
- `GET /api/projects/{id}/` - Get project with all data
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project

### Strings (Core API)
- `POST /api/strings/` - Create string (auto-variable)
- `PATCH /api/strings/{id}/` - Update string  
- `DELETE /api/strings/{id}/` - Delete string

### Other Entities
- Traits, Variables, Dimensions follow standard REST patterns
- All support embedding `{{variableName}}` in content fields

---

## Implementation Guidelines

### String Variables
- **Every String is Variable**: No opt-in, automatic creation
- **Purple Badges**: Always show `{{effectiveVariableName}}`
- **Root-Level Focus**: Hide embedded strings from main view
- **Copy Functionality**: Include copy button with `{{name}}` format

### Variable Embedding
- **Syntax**: `{{variableName}}` format only
- **Depth Limits**: Max 10 levels with visited set tracking  
- **Context Aware**: Process with current filters
- **Circular Protection**: Validate against self-reference

### Cascading Drawers ⭐
- **Simple Stacking**: Use z-index, remove complex transforms
- **Variable Detection**: Show yellow (new) and purple (existing) boxes
- **Individual Controls**: Each drawer has own save/cancel
- **ShadCN Integration**: Use built-in close buttons only

### Content Validation
- **Multiple Layers**: Frontend + backend validation
- **Default Fallbacks**: Never allow empty content
- **Meaningful Errors**: Specific validation messages
- **Idempotent Operations**: Safe to retry

### Error Handling
- **Null Safety**: Use `project?.strings` patterns
- **Graceful Degradation**: Fallbacks for missing data
- **User Feedback**: Clear error messages via toast

---

## Current Features ✅

### Core Functionality
- ✅ Authentication system with Django sessions
- ✅ Project management with CRUD operations
- ✅ String-as-variable system with auto-hash generation
- ✅ Variable embedding with recursive processing
- ✅ Conditional system (directory management)
- ✅ Automatic dimension inheritance
- ✅ Circular reference protection
- ✅ Root-level filtering (file system view)

### UI/UX
- ✅ Three-panel responsive layout
- ✅ Cascading drawer system for nested editing ⭐
- ✅ Yellow/purple variable detection boxes ⭐
- ✅ Semantic toggle controls with icons
- ✅ ShadCN component integration
- ✅ Bulk operations with improved error handling
- ✅ Filter sidebar with multiple categories

### Technical
- ✅ Idempotent operations throughout
- ✅ Comprehensive content validation
- ✅ Django signals for auto-inheritance  
- ✅ Frontend/backend validation alignment
- ✅ Performance optimizations

---

## Testing Focus Areas

### Critical Flows
1. **Cascading Editing**: Create string → add `{{nested}}` → click yellow box → edit nested → save
2. **Variable Embedding**: Multi-level A→B→C references work correctly
3. **Circular Protection**: Self-reference and loops properly blocked
4. **Bulk Operations**: Multiple string deletion with proper error handling
5. **Content Validation**: Empty content prevention with fallbacks

### UI/UX
1. **Drawer Stacking**: Multiple drawers stack properly with z-index
2. **Variable Boxes**: Yellow (new) and purple (existing) appear correctly  
3. **ShadCN Integration**: Single close buttons work properly
4. **Responsive Layout**: Three-panel layout adapts to screen sizes

---

## Key Patterns

### State Management
```javascript
// Null-safe data access
const strings = project?.strings || [];

// Cascading drawer state
const [cascadingDrawers, setCascadingDrawers] = useState([]);
```

### API Integration  
```javascript
// Use apiFetch helper for all API calls
await apiFetch('/api/strings/', { method: 'POST', body: JSON.stringify(data) });

// Sequential operations for bulk delete
for (const id of ids) {
  await apiFetch(`/api/strings/${id}/`, { method: 'DELETE' });
}
```

### Variable Detection
```javascript
// Detect variables in content
const matches = content.match(/{{([^}]+)}}/g) || [];
const variableNames = matches.map(match => match.slice(2, -2));
```

---

**CORE PRINCIPLE**: This is a file system for text content. Every string is a file, conditionals are directories, and the cascading drawer system enables deep navigation through the hierarchy. Maintain this analogy for intuitive user experience.