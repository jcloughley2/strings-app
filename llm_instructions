# LLM Instructions for Strings App

## About This Document

**PURPOSE**: Comprehensive reference guide for LLM agents working on the Strings application. Contains architecture, functionality, and implementation patterns for maintaining consistency.

**MAINTENANCE**: Keep updated with changes. Essential for future development work.

---

## Application Overview

**Application Name**: Strings  
**Purpose**: Web application for managing dynamic text content with a file-system-like structure where every string is a variable that can be referenced hierarchically.

### Core Concept: File System Analogy

- **Strings = Files**: Each string has content and a unique name/hash, can be referenced
- **Conditionals = Directories**: Containers holding multiple related string "files" (spawns)  
- **Variable References = File Includes**: Strings embed other strings using `{{variableName}}` syntax
- **Cascading Drawers = Deep Navigation**: Click nested variables to drill down with stacked editors

### Key Features

- **Every String is a Variable**: Automatic variable creation with 6-character hash or custom name
- **Variable Embedding**: Recursive `{{variableName}}` references with circular protection
- **Conditionals**: Convert strings to directories containing multiple variations (spawns)
- **Dimension Inheritance**: Strings automatically inherit metadata from embedded variables
- **Cascading Editing**: Deep nested editing with stacked drawer system
- **Root-Level Interface**: Clean view showing only top-level (non-embedded) strings
- **Real-time Variable Detection**: Yellow boxes for new variables, purple for existing

---

## Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router, Tailwind CSS, ShadCN/UI
- **State**: React useState/useEffect, cookie-based auth
- **Pattern**: Null-safe operations (`project?.strings`)

### Backend (Django)
- **Location**: `/backend/`  
- **Framework**: Django with DRF, SQLite, session auth
- **Pattern**: Comprehensive validation with meaningful errors

---

## Data Models

### Core Models
1. **Project**: Container for all content (name, description, user)
2. **String**: The "file" system - every string is automatically a variable
   - Fields: content, project, variable_name (optional), variable_hash (auto), is_conditional, is_conditional_container
   - **Effective Variable Name**: Returns variable_name || variable_hash
3. **Dimension**: Categories for organizing strings (name, project)
4. **DimensionValue**: Predefined values for dimensions
5. **StringDimensionValue**: Automatic inheritance from embedded variables

### Key Relationships
- Strings reference other strings via `{{variableName}}` embedding
- Conditionals contain spawns (multiple string variations)
- Automatic dimension inheritance through variable references
- Circular reference protection prevents infinite loops

---

## String Variable System

### Every String is a File
- **Automatic Variables**: Every string becomes a variable (no opt-in)
- **Dual Naming**: 6-char auto hash (e.g. "A7B2K9") OR custom name
- **Purple Badges**: Display `{{effectiveVariableName}}` with copy functionality
- **File Behavior**: Can be referenced, inherit properties, exist independently

### Conditionals (Directory System)  
- **Convert Any String**: Turn into container with multiple spawns (works in both main and cascading drawers)
- **Automatic Setup**: Creates dimension and spawns with random hash names (no sequential naming)
- **Idempotent**: Safe to retry operations without duplicates
- **Select Dropdown Interface**: All editing uses "Variable Type" select dropdown (String/Conditional)
- **Auto-Detection**: System repairs missing `is_conditional_container` flags automatically
- **Visual Distinction**: Orange badges for conditionals, purple badges for strings

### Variable Embedding
- **Syntax**: `{{variableName}}` in any content
- **Recursive**: Supports A→B→C chains with 10-level depth limit
- **String Variables Only**: Embed string variables only (traits removed)
- **Context-Aware**: Uses current dimension filter selections

---

## User Interface

### Layout (Three Panels)
- **Left**: Filter Sidebar (360px) - dimensions only (traits removed)
- **Center**: Main Canvas - all strings including conditionals and embedded strings, orange/purple badges
  - **"Show variables" toggle**: Controls whether conditional variables show as badges or resolved content
- **Right**: Variables Sidebar (collapsible) - dimension variable management

### Cascading Drawer System ⭐
**NEW FEATURE**: Deep nested editing with stacked drawers

#### Variable Detection Boxes
- **Yellow Boxes**: New variables detected in content (`{{newVariable}}`) 
  - Shows "New variable!" badge
  - Click to create and edit in cascading drawer
- **Purple Boxes**: Existing variables referenced in content  
  - Shows content preview
  - Click to edit in cascading drawer

#### Drawer Behavior
- **Stacking**: Each nested variable opens drawer on top of previous
- **No Sliding**: Simple z-index stacking (removed complex animations)
- **Individual Save/Cancel**: Each drawer has own controls
- **Auto-save on Cancel**: Temporary strings saved even when cancelled
- **Unlimited Depth**: Support infinite nesting levels

#### Navigation Flow
```
Main String (Edit Drawer)
  ↓ Click {{nestedVar}}
Nested String 1 (Stacked Drawer)  
  ↓ Click {{deeperVar}}
Nested String 2 (Stacked Drawer)
  ... unlimited depth
```

### String Editing Interface ⭐
**UNIFIED INTERFACE**: All variable editing (create/edit/nested/cascading) uses consistent pattern

#### Content Tab Structure
- **Variable Type Selection**: Select dropdown for choosing String or Conditional mode (consistent across all drawer types)
  - **String Mode**: Text content editing + variable detection boxes
  - **Conditional Mode**: Spawn management with yellow/purple variable boxes
- **Three Main Tabs**: Content, Dimensions, Advanced
- **Variable Name Display**: Shows at top with orange (conditional) or purple (string) badges
- **ShadCN Close Buttons**: Single X button (removed custom duplicates)
- **Consistent Interface**: Main drawer and cascading drawers use identical UI components

#### Conditional Mode Features
- **Spawn Variables**: Yellow boxes (new/temporary), purple boxes (existing)
- **Add Spawn Button**: Creates new spawn with random hash naming (no sequential patterns)
- **Auto-Container Detection**: Repairs `is_conditional_container` flag automatically
- **Consistent Interactions**: All spawns clickable to open cascading drawers
- **Conversion Support**: Can convert existing strings to conditionals in any drawer type

---

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login
- `POST /api/auth/logout/` - Logout  
- `POST /api/auth/register/` - Register
- `GET /api/auth/me/` - Current user

### Projects
- `GET /api/projects/` - List projects
- `POST /api/projects/` - Create project
- `GET /api/projects/{id}/` - Get project with all data
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `POST /api/projects/{id}/duplicate/` - Duplicate project with all content

### Strings (Core API)
- `POST /api/strings/` - Create string (auto-variable)
- `PATCH /api/strings/{id}/` - Update string  
- `DELETE /api/strings/{id}/` - Delete string

### Other Entities
- Dimensions, DimensionValues, StringDimensionValues follow standard REST patterns
- All support embedding `{{variableName}}` in content fields

---

## Implementation Guidelines

### String Variables
- **Every String is Variable**: No opt-in, automatic creation
- **Color-Coded Badges**: Orange for conditionals, purple for strings - always show `{{effectiveVariableName}}`
- **All Strings Visible**: Show all strings including embedded ones in main canvas
- **Copy Functionality**: Include copy button with `{{name}}` format

### Variable Embedding
- **Syntax**: `{{variableName}}` format only
- **Depth Limits**: Max 10 levels with visited set tracking  
- **Context Aware**: Process with current filters
- **Circular Protection**: Validate against self-reference

### Cascading Drawers ⭐
- **Simple Stacking**: Use z-index, remove complex transforms
- **Variable Detection**: Show yellow (new) and purple (existing) boxes
- **Individual Controls**: Each drawer has own save/cancel
- **Unified Interface**: Same Variable Type select dropdown across all editing contexts (main/cascading)
- **Auto-Repair**: Automatically fixes `is_conditional_container` flags for existing variables
- **ShadCN Integration**: Use built-in close buttons only
- **Conversion Support**: Can convert strings to conditionals in cascading drawers with full spawn creation

### Content Validation
- **Multiple Layers**: Frontend + backend validation
- **Default Fallbacks**: Never allow empty content
- **Meaningful Errors**: Specific validation messages
- **Idempotent Operations**: Safe to retry

### Error Handling
- **Null Safety**: Use `project?.strings` patterns
- **Graceful Degradation**: Fallbacks for missing data
- **User Feedback**: Clear error messages via toast

---

## Current Features ✅

### Core Functionality
- ✅ Authentication system with Django sessions
- ✅ Project management with CRUD operations
- ✅ String-as-variable system with auto-hash generation
- ✅ Variable embedding with recursive processing
- ✅ Conditional system (directory management)
- ✅ Automatic dimension inheritance
- ✅ Circular reference protection
- ✅ Root-level filtering (file system view)

### UI/UX
- ✅ Three-panel responsive layout
- ✅ Cascading drawer system for nested editing ⭐
- ✅ Yellow/purple variable detection boxes ⭐
- ✅ Semantic toggle controls with icons
- ✅ ShadCN component integration
- ✅ Bulk operations with improved error handling
- ✅ Filter sidebar with multiple categories

### Technical
- ✅ Idempotent operations throughout
- ✅ Comprehensive content validation
- ✅ Django signals for auto-inheritance  
- ✅ Frontend/backend validation alignment
- ✅ Performance optimizations

---

## Testing Focus Areas

### Critical Flows
1. **Cascading Editing**: Create string → add `{{nested}}` → click yellow box → edit nested → save
2. **Variable Embedding**: Multi-level A→B→C references work correctly
3. **Circular Protection**: Self-reference and loops properly blocked
4. **Bulk Operations**: Multiple string deletion with proper error handling
5. **Content Validation**: Empty content prevention with fallbacks

### UI/UX
1. **Drawer Stacking**: Multiple drawers stack properly with z-index
2. **Variable Boxes**: Yellow (new) and purple (existing) appear correctly  
3. **ShadCN Integration**: Single close buttons work properly
4. **Responsive Layout**: Three-panel layout adapts to screen sizes

---

## Key Patterns

### State Management
```javascript
// Null-safe data access
const strings = project?.strings || [];

// Cascading drawer state
const [cascadingDrawers, setCascadingDrawers] = useState([]);
```

### API Integration  
```javascript
// Use apiFetch helper for all API calls
await apiFetch('/api/strings/', { method: 'POST', body: JSON.stringify(data) });

// Sequential operations for bulk delete
for (const id of ids) {
  await apiFetch(`/api/strings/${id}/`, { method: 'DELETE' });
}
```

### Variable Detection
```javascript
// Detect variables in content
const matches = content.match(/{{([^}]+)}}/g) || [];
const variableNames = matches.map(match => match.slice(2, -2));
```

---

## Recent Changes (2025)

### UI Simplification Updates
- **✅ Removed Conditionals Sidebar Section**: Eliminated the dedicated "Conditionals" section from the left filter sidebar
- **✅ Unified Main Canvas**: Conditional variables now appear in the main canvas alongside regular strings
- **✅ Select Dropdown Interface**: Replaced String/Conditional tabs with a cleaner select dropdown for variable type selection
- **✅ Streamlined Filtering**: Removed conditional variable filtering from export and processing functions
- **✅ Removed Traits System**: Completely eliminated traits, trait variables, and trait-based filtering from the application

### Additional Updates (Latest)
- **✅ Show All Strings**: Embedded strings now appear independently in main canvas (no more filtering)
- **✅ Visual Distinction**: Orange badges for conditionals, purple badges for strings throughout the app
- **✅ Consistent UI Components**: All drawer types (main, cascading, nested) use identical select dropdown interface
- **✅ Fixed Conversion Logic**: String-to-conditional conversion works properly in all drawer contexts
- **✅ Spawn Loading**: Existing conditionals properly load their spawn children when edited
- **✅ Complete Workflow**: Cascading drawer conversions create dimensions, spawns, and relationships correctly
- **✅ Project Duplication**: Full project duplication with "Copy of" naming and complete data preservation

### Benefits
- **Cleaner Interface**: Reduced sidebar complexity by removing redundant conditional management and traits
- **Unified Workflow**: All string management happens in one place (main canvas) with consistent interfaces
- **Better UX**: Select dropdown is more compact and mobile-friendly than tabs, works across all drawer types
- **Complete Visibility**: All strings visible independently, better understanding of project structure
- **Simplified Logic**: Fewer filtering mechanisms to maintain, no trait complexity
- **Focused Architecture**: System now focuses purely on string variables and dimensions
- **Robust Conversions**: String-to-conditional conversion works reliably in any editing context

---

## Development Workflow

### Recent Major Updates (Latest)

#### "Show Variables" Toggle & Dimension-Based Spawn Selection
- **"Show variables" toggle button** in canvas header (inactive by default, orange styling when active)
- **Dynamic conditional resolution**: When toggle is OFF, shows actual spawn content instead of variable badges
- **Real-time dimension control**: Selecting different dimension values changes displayed content instantly
- **Two display modes**:
  - Toggle OFF: Shows resolved content (e.g., "My favorite color is blue")
  - Toggle ON: Shows variable structure with orange badges (e.g., "My favorite color is {{color}}")

#### Always-Selected Dimensions System
- **Automatic default selection**: Each dimension always has one value selected (uses first value as default)
- **No deselection allowed**: Removed X buttons, users can only switch between dimension values
- **Streamlined filtering**: All strings always visible, dimensions control spawn resolution only
- **Improved UX**: Consistent state, no confusing "nothing selected" scenarios

#### Enhanced Cascading Drawer System
- **Fixed conditional creation**: Proper handling of new vs existing strings in cascading drawers
- **Robust spawn management**: Added existence checks to prevent dimension value conflicts
- **Variable name population**: Advanced tab now shows current variable names for existing variables
- **Unified interface**: Consistent select dropdown for String/Conditional mode across all drawer types

#### Technical Improvements
- **Dimension-spawn lookup**: Fixed spawn content resolution using variable name matching
- **Uniqueness constraint handling**: Prevents "fields must make a unique set" errors when adding spawns
- **Temporary string detection**: Proper POST vs PATCH API calls for new vs existing strings
- **Advanced tab fixes**: Variable name field now pre-populated with effective_variable_name/variable_hash

### Git Operations
- **IMPORTANT**: Do NOT commit or push code changes unless explicitly requested by the user
- Only make the requested code changes and let the user handle git operations when ready
- User prefers to control their own commit timing and messages

---

**CORE PRINCIPLE**: This is a file system for text content. Every string is a file, conditionals are directories, and the cascading drawer system enables deep navigation through the hierarchy. Maintain this analogy for intuitive user experience.

Here is an example of a setup in a project:

So lets say I have conditional variable, {{color-option}} and its spawn strings are {{option-1}} and {{option-2}}. The content of {{option-1}} is "blue" and the content of {{option-2}} is "green". Therefore we also have a dimension called "color-option" with dimension values of "option-1" and "option-2" 

Lets say I have the sentence "My favorite color is {{color-option}}". If option-1 dimension value is selected, the sentence reads "My favorite color is blue". If option-2 dimension value is selected, the sentence reads "My favorite color is green".