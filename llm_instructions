# LLM Instructions for Strings App

## About This Document

**PURPOSE**: This document serves as a comprehensive reference guide for any LLM agent that needs to work on the Strings application. It contains everything needed to understand the app's purpose, architecture, functionality, and implementation patterns without requiring prior context.

**INTENDED AUDIENCE**: Future LLM agents who may need to:
- Develop new features for this application
- Debug or fix existing functionality
- Rebuild or significantly modify the application
- Understand the codebase structure and patterns
- Maintain consistency with established patterns

**MAINTENANCE REQUIREMENT**: This document MUST be kept up-to-date whenever changes are made to the application. Any developer (human or AI) working on this app has the responsibility to update this documentation to reflect their changes, ensuring future developers have accurate information.

**HOW TO USE**: Read through this document to understand the application before making any changes. Use the implementation guidelines to maintain consistency with existing patterns. Update this document immediately after making significant changes.

---

## Application Overview

**Application Name**: Strings  
**Purpose**: A web application for managing dynamic text content with conditional variables, traits, and organizational dimensions.

### What the Strings App Does

The Strings application allows users to create and manage dynamic text content that changes based on different contexts (traits) and conditions. Key functionality includes:

- **Project Management**: Users create projects to organize their content
- **String Management**: Define text strings that can contain variables (e.g., "The {{animal}} is {{color}}")
- **Variable System**: Two types of variables:
  - **Trait Variables**: Have different values for different traits (e.g., {{animal}} = "dog" for "Good" trait, "snake" for "Evil" trait)
  - **String Variables**: Reference other strings in the project (e.g., {{footer}} references a footer string)
- **Trait System**: Define contexts like "Good" and "Evil" that determine how trait variables are rendered
- **Conditional Variables**: Variables that can be toggled on/off to show/hide content dynamically
- **Dimension System**: Categorize strings with multiple values per dimension for organization and filtering
- **Export Functionality**: Download CSV files with strings rendered for all trait/conditional combinations

### Example Use Case
A project with string "The {{animal}} is {{color}}" and traits "Good"/"Evil":
- Good trait: {{animal}} = "gerbil", {{color}} = "blue" → "The gerbil is blue"
- Evil trait: {{animal}} = "snake", {{color}} = "red" → "The snake is red"

## Application Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with ShadCN/UI components
- **State Management**: React useState and useEffect hooks
- **Authentication**: Cookie-based sessions with Django backend

### Backend (Django)
- **Location**: `/backend/`
- **Framework**: Django with Django REST Framework
- **Database**: SQLite (default Django setup)
- **Authentication**: Django's built-in session authentication
- **API**: RESTful endpoints with proper CORS configuration

## Data Models & Relationships

### Core Models

1. **Project**: Container for all user content
   - Fields: name, description, created_at, updated_at, user (foreign key)
   
2. **Trait**: Different contexts/modes for variable values
   - Fields: name, project (foreign key), created_at, updated_at
   
3. **Variable**: Reusable text placeholders with TWO TYPES:
   - **Trait Variables**: Traditional variables with different values per trait
   - **String Variables**: Variables that reference other strings in the project
   - Fields: name, project (foreign key), variable_type ('trait' or 'string'), referenced_string (foreign key, nullable), is_conditional (boolean), created_at, updated_at
   
4. **VariableValue**: Trait-specific values for TRAIT variables only
   - Fields: variable (foreign key), trait (foreign key), value, created_at, updated_at
   - Note: String variables don't use VariableValue - they reference strings directly
   
5. **String**: Main content with variables and conditionals
   - Fields: content, project (foreign key), created_at, updated_at
   
6. **Conditional**: Named conditional blocks within strings (DEPRECATED - now uses conditional variables)
   - Fields: name, project (foreign key), created_at, updated_at

7. **Dimension**: Categories for organizing/filtering strings
   - Fields: name, project (foreign key), created_at, updated_at
   - Constraints: unique_together = ['name', 'project'] (prevents duplicate dimension names within project)

8. **DimensionValue**: Predefined values for each dimension
   - Fields: dimension (foreign key), value, created_at, updated_at
   - Constraints: unique_together = ['dimension', 'value'] (prevents duplicate values within same dimension)

9. **StringDimensionValue**: Many-to-many relationship between strings and dimension values
   - Fields: string (foreign key), dimension_value (foreign key), created_at
   - Constraints: unique_together = ['string', 'dimension_value'] (prevents duplicate assignments)

### Variable Types Explained

1. **Trait Variables** (variable_type='trait'):
   - Have different values for each trait via VariableValue model
   - Traditional behavior: {{animal}} shows "dog" for trait A, "cat" for trait B
   
2. **String Variables** (variable_type='string'):
   - Reference another string in the project via referenced_string field
   - When rendered, they show the content of the referenced string
   - Can be created during string creation/editing with checkbox option
   - Example: {{footer}} might reference a string containing "Copyright 2024"

### Conditional Variables System

- Variables can be marked as conditional (is_conditional=True)
- Conditional variables appear in a special selector in the UI
- Users can toggle which conditional variables are "active"
- When a conditional variable is not selected, it's completely removed from string rendering
- This replaced the old [[conditional]] ... [[/]] block system

### Key Relationships

- Projects contain Traits, Variables, Strings, Conditionals, and Dimensions
- VariableValues link Variables to Traits with specific values (trait variables only)
- String variables link to other Strings via referenced_string field
- Strings can reference Variables via {{variable_name}} syntax
- Variables can be conditional and are toggled via UI selector
- Dimensions contain DimensionValues (one-to-many)
- Strings can be assigned DimensionValues via StringDimensionValue (many-to-many)
- Dimension names must be unique within a project
- DimensionValues must be unique within a dimension

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login with username/password
- `POST /api/auth/logout/` - Logout current user
- `POST /api/auth/register/` - Register new user
- `GET /api/auth/user/` - Get current user info

### Projects
- `GET /api/projects/` - List user's projects
- `POST /api/projects/` - Create new project
- `GET /api/projects/{id}/` - Get project details (includes all related data)
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `GET /api/projects/{id}/download-csv/` - Download project as CSV

### Traits
- `GET /api/projects/{project_id}/traits/` - List project traits
- `POST /api/traits/` - Create new trait
- `PATCH /api/traits/{id}/` - Update trait
- `DELETE /api/traits/{id}/` - Delete trait

### Variables
- `GET /api/projects/{project_id}/variables/` - List project variables
- `POST /api/variables/` - Create new variable
  - Required: name, project, variable_type ('trait' or 'string')
  - Optional: referenced_string (for string variables), is_conditional (boolean)
- `PATCH /api/variables/{id}/` - Update variable
- `DELETE /api/variables/{id}/` - Delete variable

### Variable Values
- `GET /api/variables/{variable_id}/values/` - List variable values by trait
- `POST /api/variable-values/` - Create variable value for trait
- `PATCH /api/variable-values/{id}/` - Update variable value
- `DELETE /api/variable-values/{id}/` - Delete variable value

### Strings
- `GET /api/projects/{project_id}/strings/` - List project strings
- `POST /api/strings/` - Create new string
- `PATCH /api/strings/{id}/` - Update string
- `DELETE /api/strings/{id}/` - Delete string

### Dimensions
- `GET /api/dimensions/` - List user's dimensions (filtered by project access)
- `POST /api/dimensions/` - Create new dimension
  - Required: name, project
- `PATCH /api/dimensions/{id}/` - Update dimension
- `DELETE /api/dimensions/{id}/` - Delete dimension

### Dimension Values
- `GET /api/dimension-values/` - List dimension values (filtered by user access)
- `POST /api/dimension-values/` - Create new dimension value
  - Required: dimension, value
- `PATCH /api/dimension-values/{id}/` - Update dimension value
- `DELETE /api/dimension-values/{id}/` - Delete dimension value

### String Dimension Values
- `GET /api/string-dimension-values/` - List string-dimension-value relationships
  - Optional query param: `?string={string_id}` to filter by string
- `POST /api/string-dimension-values/` - Create new string-dimension-value relationship
  - Required: string, dimension_value
- `DELETE /api/string-dimension-values/{id}/` - Delete relationship

## User Interface Design

### Layout Structure

The application uses a sophisticated three-panel layout system optimized for content management:

#### Three-Panel Layout Structure:
- **Left Panel (Filter Sidebar)**: Fixed 264px wide sidebar containing filtering controls
- **Center Panel (Main Canvas)**: Flexible width area displaying project strings and main content
- **Right Panel (Variables Sidebar)**: Collapsible 288px wide sidebar for variable management

#### Global Navigation
- **App Header**: Full-width header with app name "Strings" and user authentication controls
- **Project Header**: Full-width header beneath global navigation containing:
  - Project name (left side) with proper typography hierarchy
  - Action buttons (right side): "Manage Variables", "Edit Project", and overflow menu with "Delete Project"
  - The "Manage Variables" button toggles the collapsible variables sidebar

### Left Panel: Filter Sidebar

Dedicated filtering controls with semantic icon system and hover interactions:

#### Dimensions Section
- **Purpose**: Filter strings by dimension values
- **Icon**: Globe icon with semantic meaning
- **Functionality**: 
  - One section per dimension with dimension name as header
  - Clickable badges for each dimension value (single selection per dimension)
  - "Clear" button appears when a value is selected
  - Plus icon in section header for creating new dimensions
  - Edit buttons appear on hover for dimension management
- **Behavior**: Only strings with matching dimension values are shown (AND logic across dimensions)

#### Traits Section  
- **Purpose**: Control variable rendering context
- **Icon**: SwatchBook icon with semantic meaning
- **Functionality**:
  - Radio button selection including "Blank (Variables)" as first option
  - All project traits listed with edit buttons appearing on hover
  - Plus icon for creating new traits
  - Single selection determines how trait variables are rendered in strings

#### Conditionals Section
- **Purpose**: Control conditional content visibility  
- **Icon**: Signpost icon with semantic meaning
- **Functionality**:
  - Individual checkboxes for each conditional variable
  - Edit buttons appear on hover for conditional variable management
  - Multiple selection supported
  - Section only appears if conditional variables exist
- **Behavior**: Selected conditionals show their content, unselected are hidden

#### Visual Design Features:
- Fixed width of 264px with `bg-muted/40` background
- Consistent spacing with ml-6 content indentation  
- Hover interactions with `hover:bg-muted/50` for interactive elements
- Edit buttons with smooth opacity transitions (opacity-0 to opacity-100 on group-hover)
- Professional visual hierarchy with clear section separation

### Center Panel: Main Canvas

Primary content area with streamlined controls and responsive design:

#### Canvas Header
- **Title**: "Project Strings" with proper typography hierarchy
- **Display Mode Controls**: Three toggle buttons with semantic color coding:
  1. **String Variables** (Green, `Spool` icon) - Controls string variable display mode
  2. **Highlight** (Yellow, `Highlighter` icon) - Controls plaintext vs badge mode 
  3. **Dimensions** (Blue, `Bookmark` icon) - Controls dimension tag visibility
- **Action Button**: "+ New String" button positioned at far right for optimal layout

#### String Display Area
- **String Cards**: Clickable ShadCN Card components for each string
- **Interactive Elements**: 
  - Entire card is clickable to edit string content
  - Delete buttons with proper event handling (e.stopPropagation())
  - Variable badges in highlight mode with click prevention
- **Responsive Design**: 
  - Conditional line height: `leading-normal` for plaintext, `leading-loose` for badge mode
  - Proper spacing between cards and consistent padding (px-6 throughout)
- **Empty States**: Intelligent messages for no strings vs no filtered matches

### Right Panel: Variables Sidebar (Collapsible)

Dedicated variable management panel with streamlined focus:

#### Sidebar Structure
- **Header**: Contains "Variables" title and X close button
- **Content**: Variables-only management (removed multi-tab system)
- **Footer**: "+ New Variable" button for creating variables
- **Behavior**: 
  - Collapsible drawer that pushes main content (not overlay)
  - Closed by default when entering project
  - Toggled via "Manage Variables" button in project header
  - Fixed width of 288px when open

#### Variable Management
- **Variable List**: All project variables with visual type indicators
  - **String Variables**: Green `Spool` icon badge
  - **Conditional Variables**: Purple `Signpost` icon badge
- **Interactions**: All variables clickable for editing
- **Visual Design**: Consistent with filter sidebar hover patterns and spacing

### UI Component System

#### ShadCN Components Used
- **Dialog**: All create/edit forms with height constraints and scroll behavior
- **Button**: Consistent styling with variants (default, secondary, destructive, outline)
- **Input/Label**: Form inputs with proper accessibility and consistent spacing
- **Select**: Trait selection with SelectSeparator for "Blank" option
- **MultiSelect**: Conditional variables and dimension values selection (custom component)
- **DropdownMenu**: Overflow menus for project actions with proper styling
- **Badge**: Variable indicators, dimension values, and type indicators
- **Sonner**: Toast notifications for user feedback
- **Card**: String display with clickable interaction design

#### Key UI Patterns

1. **Toggle Button System**: 
   - Semantic color coding (green/yellow/blue) for different functions
   - Meaningful Lucide icons for visual recognition
   - Consistent `variant="outline"` styling with custom active themes

2. **Clickable Interface Elements**:
   - Project tiles and string cards are fully clickable surfaces
   - Proper event handling for nested interactive elements
   - Stop propagation for delete buttons and variable badges

3. **Dialog System Enhancements**:
   - Height constraints with `max-h-[calc(100vh-2rem)]` to prevent viewport overflow
   - Scroll behavior with `overflow-y-auto` for long content
   - Pre-populated forms for edit operations with proper validation

4. **Form Standardization**:
   - Consistent `space-y-2` spacing between form elements
   - Proper Label components with `htmlFor`/`id` attributes
   - Helper text styling and error handling patterns

5. **Typography Hierarchy**:
   - App name: `text-2xl font-bold tracking-tight`
   - Project name: `text-xl font-semibold`  
   - Section headers: `text-lg font-semibold`
   - Clear visual distinction between hierarchy levels

6. **Consistent Padding System**:
   - Uniform 24px (`px-6`) padding across all headers and content areas
   - Applied to app header, project header, filter sidebar, strings canvas, and variables sidebar

## String Rendering System

The application features a sophisticated string rendering system that handles multiple display modes and variable types.

### Display Mode Controls

#### Show String Variables Toggle
**CRITICAL**: This toggle affects ONLY string variables, NOT trait variables:

- **When OFF (default state)**:
  - String variables: Show their actual content (referenced string content)
  - Trait variables: Show their trait-specific values (ALWAYS)
  
- **When ON**:
  - String variables: Display as {{variableName}} instead of expanding content
  - Trait variables: Continue to show their trait-specific values (UNCHANGED)

#### Highlight Toggle (Plaintext vs Styled Mode)
- **OFF (Plaintext Mode)**: Variables are replaced with their actual values as plain text
- **ON (Styled Mode - DEFAULT)**: Variables show as colored/grey badges with interaction

#### Dimensions Toggle
- **OFF**: Dimension tags are hidden from string display
- **ON**: Dimension tags show as blue badges below string content

### Rendering Behavior by Mode

#### Styled Mode (Highlight ON, Default):
- **Trait Variables**: Show as colored badges (green=has value, red=no value)
- **String Variables**: 
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as grey {{variable}} badges
- **Conditional Variables**: Only show if selected in conditionals selector

#### Plaintext Mode (Highlight OFF):
- **Trait Variables**: Replaced with trait-specific values or variable name if no value
- **String Variables**:
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as {{variable}} text
- **Conditional Variables**: Only show if selected in conditionals selector

#### Special Trait Selection Cases:
- **Blank Trait + showStringVariables=OFF**: String variables expand, trait variables show as {{variable}}
- **Blank Trait + showStringVariables=ON**: All variables show as {{variable}}
- **Selected Trait + showStringVariables=OFF**: String variables expand, trait variables show values
- **Selected Trait + showStringVariables=ON**: String variables show as badges, trait variables show values

### Technical Implementation

#### React Key Management
The system uses sophisticated key generation to avoid React conflicts:
- **Base Keys**: Include string ID, depth, index, and variable name
- **Nested Content**: Uses keyPrefix parameter to ensure uniqueness
- **Format**: `str-${stringId}-${depth}-${type}-${index}-${variableName}`

#### Rendering Functions
- **renderContentRecursively**: For styled mode with proper keyPrefix for uniqueness
- **processStringContent**: For plaintext mode
- **Recursive Handling**: Supports nested string variables by passing unique keyPrefix

## Filtering System

### Filter Logic
- **AND Operation**: All active filters must match for a string to be displayed
- **Dimension Filtering**: Single selection per dimension, strings without dimension values are hidden when filters active
- **Trait Filtering**: Affects variable rendering but doesn't filter strings
- **Conditional Filtering**: Multiple selection, affects content visibility within strings

### Empty States
- **No Strings**: "No strings created yet" when project has no strings
- **No Matches**: "No strings match the current filters" when filters eliminate all results
- **Smart Messaging**: Contextual messages based on filter state

## Form System and Data Management

### Variable Creation Workflows

1. **Manual Creation**: Via sidebar "New Variable" button with type selection
2. **Auto-Creation from Strings**: When {{newVariable}} is typed in string content
3. **String Variable Creation**: Via checkbox in string create/edit dialog
   - Checkbox: "Create a variable to reference this string"
   - Creates a string variable that references the current string
   - Works for both new strings and edited strings

### Dimension Management System

#### Comprehensive CRUD Operations
- **Create**: New dimensions with validation for unique names within project
- **Read**: Display dimensions with their predefined values as grey badges in sidebar
- **Update**: Edit dimension names and manage dimension values
- **Delete**: Remove dimensions with proper cascade handling

#### Multi-Select Dimension Values
- **Multiple Values per Dimension**: Strings can have multiple values for each dimension
- **Flexible Assignment**: Mix of predefined and custom values supported
- **UI Implementation**: MultiSelect component with checkboxes and custom value entry
- **Data Storage**: Multiple StringDimensionValue relationships per string per dimension

#### Validation Features
- **Unique Dimension Names**: Prevents duplicate dimension names within project (case-insensitive)
- **Unique Dimension Values**: Prevents duplicate values within same dimension (case-insensitive)
- **Database Constraints**: Backend enforces uniqueness via model constraints
- **Real-time Validation**: Toast notifications for validation errors

#### Display Features
- **String Cards**: Show dimension values as blue badges below content
- **Multi-Value Format**: "DimensionName: value1, value2, value3" (comma-separated)
- **Grouped Display**: Multiple values for same dimension combined into single badge
- **Consistent Styling**: `bg-blue-50 text-blue-700 border-blue-200` theme

## Development Guidelines and Patterns

### State Management Patterns
- Use React useState for component-level state
- Implement proper cleanup in useEffect hooks
- Follow established pattern of separate handlers for create vs edit operations
- Always reset form state when closing dialogs

### Variable System Guidelines
- **Always specify variable_type** when creating variables ('trait' or 'string')
- **String variables** should reference another string via referenced_string field
- **Trait variables** use VariableValue model for trait-specific values
- **Conditional variables** can be either type, marked with is_conditional=True

### String Rendering Guidelines
- **Use renderContentRecursively** for styled mode with proper keyPrefix for uniqueness
- **Use processStringContent** for plaintext mode
- **Respect toggle states**: showStringVariables, isPlaintext, selectedConditionalVariables
- **Handle nested string variables** by passing unique keyPrefix to prevent React key conflicts

### API Integration Best Practices
- Use consistent error handling with try/catch blocks
- Implement proper loading states for user feedback
- Follow RESTful conventions for endpoint design
- Use PATCH for updates, POST for creation, DELETE for removal
- **Always refresh project data** after creating variables or strings to get updated relationships

### Form Handling Patterns
- Pre-populate edit forms with existing data
- Implement proper validation before API calls
- Use controlled components for all form inputs
- Provide clear user feedback via toast notifications
- **Handle string variable creation** via checkbox in string dialogs

### Layout and Interaction Patterns

#### Three-Panel Layout Management
- **Filter Sidebar**: Fixed 264px width, never changes
- **Main Canvas**: Flexible width, adjusts when variables sidebar opens/closes
- **Variables Sidebar**: Fixed 288px when open, pushes content (no overlay)
- **Responsive Behavior**: Ensure layout works across different screen sizes

#### Hover Interaction System
- **Edit Button Pattern**: Opacity transitions (opacity-0 to opacity-100 on group-hover)
- **Consistent Application**: Used throughout filter sidebar and management interfaces
- **Semantic Icons**: Globe (Dimensions), SwatchBook (Traits), Signpost (Conditionals)

#### Dialog and Form Standards
- **Height Constraints**: `max-h-[calc(100vh-2rem)]` prevents viewport overflow
- **Scroll Behavior**: `overflow-y-auto` for content exceeding available height
- **Consistent Spacing**: `space-y-2` between form elements
- **Proper Accessibility**: Label components with `htmlFor`/`id` attributes

## Development Setup & Commands

### Backend Setup
```bash
cd backend
source venv/bin/activate  # Activate Python virtual environment
pip install -r requirements.txt
python manage.py migrate
python manage.py runserver  # Runs on port 8000
```

### Frontend Setup
```bash
cd frontend
npm install
npm run dev  # Runs on port 3000 (or next available port like 3001/3002)
```

### Common Development Tasks
- **Database Migrations**: `python manage.py makemigrations` then `python manage.py migrate`
- **Create Superuser**: `python manage.py createsuperuser`
- **Install Frontend Dependencies**: `npm install <package-name>`
- **Add ShadCN Components**: `npx shadcn@latest add <component-name>`

### Development Server Notes
- Backend runs on port 8000 by default
- Frontend auto-detects available ports (3000, 3001, 3002, etc.)
- CORS is configured for cross-origin requests between frontend and backend
- Hot reloading enabled for both frontend and backend development

## Current State & Features

### Fully Implemented Features ✅

#### Core Functionality
- ✅ **Authentication System**: Login, logout, registration with Django sessions
- ✅ **Project Management**: Full CRUD with overflow menus and project tiles
- ✅ **String Management**: Create, edit, delete strings with automatic variable detection
- ✅ **Variable System**: Both trait and string variables with proper type handling
- ✅ **Conditional Variables**: Replace old conditional blocks with toggle-based system
- ✅ **Trait Management**: Full CRUD with variable value management
- ✅ **Dimension System**: Complete implementation with multi-value assignment

#### Advanced String Rendering
- ✅ **Show String Variables Toggle**: Controls string variable display mode independently
- ✅ **Highlight/Plaintext Modes**: Badge vs text rendering with conditional line heights
- ✅ **Dimensions Toggle**: Show/hide dimension tags on strings
- ✅ **Nested Variable Support**: Recursive rendering with React key conflict resolution
- ✅ **Real-time Updates**: Immediate UI response to all toggle and selection changes

#### UI/UX Excellence
- ✅ **Three-Panel Layout**: Professional filter/content/management layout
- ✅ **Semantic Toggle System**: Color-coded buttons with meaningful icons
- ✅ **Filter Sidebar**: Comprehensive filtering with dimension/trait/conditional controls
- ✅ **Variables Sidebar**: Collapsible management panel with push behavior
- ✅ **Clickable Interface**: Fully interactive cards and tiles with proper event handling
- ✅ **Form Standardization**: Consistent spacing, validation, and accessibility
- ✅ **Typography Hierarchy**: Clear visual distinction between content levels
- ✅ **Consistent Padding**: Uniform 24px spacing throughout application

#### Advanced Features
- ✅ **Multi-Select Dimension Values**: Multiple values per dimension per string
- ✅ **Dimension Value Validation**: Prevents duplicates with real-time feedback
- ✅ **CSV Export**: Comprehensive export with all trait/conditional combinations
- ✅ **Dialog Height Management**: Proper viewport handling with scroll behavior
- ✅ **Responsive Design**: Works across different screen sizes and devices
- ✅ **Professional Styling**: ShadCN components with custom enhancements

### Technical Achievements ✅

#### Database and API
- ✅ **Complete Data Model**: All entities with proper relationships and constraints
- ✅ **RESTful API**: Comprehensive endpoints with proper CORS and authentication
- ✅ **Database Migrations**: Properly versioned schema with constraint validation
- ✅ **Cascade Operations**: Proper handling of related data deletion and updates

#### Frontend Architecture  
- ✅ **Component System**: Reusable ShadCN components with custom modifications
- ✅ **State Management**: Proper React patterns with controlled components
- ✅ **Error Handling**: Comprehensive try/catch with user-friendly notifications
- ✅ **Performance**: Optimized rendering with proper key management

## Testing Guidelines

### Critical Test Areas

#### Authentication and Project Flow
1. **User Registration/Login**: Test complete authentication flow
2. **Project CRUD**: Create, edit, delete projects with proper navigation
3. **Project Tiles**: Clickable navigation and overflow menu functionality

#### Variable System Testing
1. **String Variables**: Creation via checkbox and manual creation
2. **Trait Variables**: Value assignment across different traits
3. **Conditional Variables**: Toggle functionality and content visibility
4. **Variable Type Icons**: Proper display of Spool and Signpost indicators

#### String Rendering Combinations
1. **Toggle Combinations**: Test all combinations of three toggle buttons
2. **Trait Selection**: Verify rendering changes with different trait selections
3. **Conditional Selection**: Multiple conditional variable combinations
4. **Nested Variables**: String variables referencing strings with variables

#### Dimension System Testing
1. **Multi-Value Assignment**: Assign multiple values per dimension to strings
2. **Validation**: Test duplicate prevention for names and values
3. **Filtering**: Single selection per dimension with AND logic
4. **Display**: Verify comma-separated format on string cards

#### Layout and Interaction Testing
1. **Three-Panel Layout**: Test with variables sidebar open/closed
2. **Filter Sidebar**: All filtering combinations and clear functionality
3. **Hover Interactions**: Edit buttons throughout filter sidebar
4. **Dialog Management**: Height constraints and scroll behavior
5. **Clickable Elements**: Cards, tiles, buttons with proper event handling

#### Form and Dialog Testing
1. **Pre-population**: Edit dialogs load existing data correctly
2. **Validation**: Required fields and duplicate prevention
3. **Real-time Updates**: UI reflects changes immediately
4. **Error Handling**: Proper feedback for failed operations

### Browser Compatibility
- **Modern Browsers**: Chrome, Firefox, Safari, Edge support
- **Responsive Design**: Mobile and tablet device compatibility
- **Accessibility**: Screen reader and keyboard navigation support

## Future Enhancement Areas

### Performance Optimization
- Bulk operations for variables and strings
- Lazy loading for large projects
- Optimized rendering for complex nested variables

### Feature Extensions
- Export formats beyond CSV (JSON, XML)
- Advanced conditional logic (AND/OR operations)
- Variable categories or namespacing
- Undo/redo functionality
- Project templates and cloning

### User Experience
- Keyboard shortcuts for common actions
- Advanced search and filtering
- Drag-and-drop reordering
- Collaborative editing features

---

**REMEMBER**: Keep this document updated with any changes made to the application. Future developers depend on accurate documentation to maintain and enhance the application effectively.