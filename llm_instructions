# LLM Instructions for Strings App

## About This Document

**PURPOSE**: This document serves as a comprehensive reference guide for any LLM agent that needs to work on the Strings application. It contains everything needed to understand the app's purpose, architecture, functionality, and implementation patterns without requiring prior context.

**INTENDED AUDIENCE**: Future LLM agents who may need to:
- Develop new features for this application
- Debug or fix existing functionality
- Rebuild or significantly modify the application
- Understand the codebase structure and patterns
- Maintain consistency with established patterns

**MAINTENANCE REQUIREMENT**: This document MUST be kept up-to-date whenever changes are made to the application. Any developer (human or AI) working on this app has the responsibility to update this documentation to reflect their changes, ensuring future developers have accurate information.

**HOW TO USE**: Read through this document to understand the application before making any changes. Use the implementation guidelines to maintain consistency with existing patterns. Update this document immediately after making significant changes.

---

## Application Overview

**Application Name**: Strings  
**Purpose**: A web application for managing dynamic text content with conditional variables, traits, organizational dimensions, and advanced variable embedding capabilities.

### What the Strings App Does

The Strings application allows users to create and manage dynamic text content that changes based on different contexts (traits) and conditions. Key functionality includes:

- **Project Management**: Users create projects to organize their content
- **String Management**: Define text strings that can contain variables (e.g., "The {{animal}} is {{color}}")
- **Advanced Variable System**: Revolutionary string-as-variable system where every string is automatically a variable:
  - **String Variables**: Every string is automatically a variable with either a 6-character random hash or custom name
  - **Trait Variables**: Traditional variables with different values for different traits
  - **Variable Embedding**: Variables can contain other variables using {{variableName}} format
- **Trait System**: Define contexts like "Good" and "Evil" that determine how trait variables are rendered
- **Conditional Variables**: Both trait and string variables can be marked as conditional to show/hide content dynamically
- **Dimension System**: Categorize strings with multiple values per dimension for organization and filtering
- **Automatic Dimension Inheritance**: Strings automatically inherit dimension values from embedded variables
- **Circular Reference Protection**: Advanced system prevents self-reference and circular chains
- **Export Functionality**: Download filtered CSV files containing only strings that match current filter state

### Example Use Case
A project with string "The {{animal}} is {{color}}" and traits "Good"/"Evil":
- Good trait: {{animal}} = "gerbil", {{color}} = "blue" → "The gerbil is blue"
- Evil trait: {{animal}} = "snake", {{color}} = "red" → "The snake is red"
- String variables: {{greeting}} references another string "Hello {{userName}}"
- Variable embedding: Variable dimension values can contain "{{companyName}} welcomes {{userName}}"

## Application Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with ShadCN/UI components
- **State Management**: React useState and useEffect hooks
- **Authentication**: Cookie-based sessions with Django backend

### Backend (Django)
- **Location**: `/backend/`
- **Framework**: Django with Django REST Framework
- **Database**: SQLite (default Django setup)
- **Authentication**: Django's built-in session authentication
- **API**: RESTful endpoints with proper CORS configuration

## Data Models & Relationships

### Core Models

1. **Project**: Container for all user content
   - Fields: name, description, created_at, updated_at, user (foreign key)
   
2. **Trait**: Different contexts/modes for variable values
   - Fields: name, project (foreign key), created_at, updated_at
   
3. **Variable**: Traditional trait variables
   - Fields: name, project (foreign key), is_conditional (boolean), created_at, updated_at
   
4. **VariableValue**: Trait-specific values for trait variables
   - Fields: variable (foreign key), trait (foreign key), value, created_at, updated_at
   - Note: Can contain embedded variables using {{variableName}} format
   
5. **String**: Revolutionary string-as-variable system
   - **Every string is automatically a variable**: No more variable checkbox
   - Fields: content, project (foreign key), variable_name (optional custom name), variable_hash (6-character auto-generated), is_conditional (boolean), created_at, updated_at
   - **Effective Variable Name**: Returns variable_name if set, otherwise variable_hash
   - **Auto-generated Hash**: Unique 6-character hash using uppercase letters and numbers
   - **Conditional Support**: Strings can be marked as conditional and appear in conditionals sidebar
   
6. **Dimension**: Categories for organizing/filtering strings
   - Fields: name, project (foreign key), created_at, updated_at
   - Constraints: unique_together = ['name', 'project']

7. **DimensionValue**: Predefined values for each dimension
   - Fields: dimension (foreign key), value, created_at, updated_at
   - Constraints: unique_together = ['dimension', 'value']

8. **StringDimensionValue**: Automatic dimension inheritance system
   - Fields: string (foreign key), dimension_value (foreign key), created_at
   - Constraints: unique_together = ['string', 'dimension_value']
   - **Automatic Assignment**: Strings inherit dimension values from embedded variables
   - **Visual Protection**: Inherited values shown with blue dashed borders and dots, cannot be manually deleted

9. **VariableDimensionValue**: Dimension-specific values for trait variables
   - Fields: variable (foreign key), dimension_value (foreign key), value, created_at, updated_at
   - Constraints: unique_together = ['variable', 'dimension_value']
   - **Variable Embedding Support**: Values can contain {{variableName}} format for advanced compositions

### Revolutionary String Variable System

#### Every String is a Variable
- **No Variable Checkbox**: Removed - every string is automatically a variable
- **Dual Naming System**: 
  - **Auto Hash**: 6-character unique hash (e.g., "A7B2K9") generated automatically
  - **Custom Name**: Optional user-defined name for easier reference
- **Effective Variable Name**: Property that returns custom name or hash
- **Purple Badges**: All strings display purple badges showing {{effectiveVariableName}} with copy functionality
- **Variable Sidebar Removal**: String variables no longer appear in variables sidebar dialog

#### Variable Usage and Reference
- **Double Bracket Format**: Copy button provides `{{variableName}}` format ready for pasting
- **Universal Reference**: Can be referenced by either custom name or hash
- **Conditional Support**: String variables can be marked as conditional
- **Conditional Sidebar**: Conditional string variables appear with purple Spool icon

### Variable Embedding System

#### Embedding Variables in Variable Values
**CRITICAL FEATURE**: Both trait variable values and dimension values can contain embedded variables:

- **Syntax**: Use `{{variableName}}` format within variable values
- **Recursive Processing**: Supports nested variables (Variable A contains Variable B contains Variable C)
- **Infinite Recursion Protection**: Backend and frontend limit depth to 10 levels
- **Support for All Variable Types**: Can embed both trait variables and string variables
- **Real-time Processing**: Embedded variables are processed during rendering with current filter context

#### Implementation Details
- **Backend Processing**: `_process_variable_content()` method handles recursive variable expansion
- **Frontend Processing**: `processVariableContent()` function provides consistent client-side rendering
- **Depth Tracking**: Both backend and frontend track recursion depth to prevent infinite loops
- **Filter Context**: Embedded variables respect current trait and dimension filter selections

#### Use Cases
- **Trait Variable Dimension Values**: `"Welcome to {{companyName}}, {{userName}}"`
- **Trait Variable Values**: `"Hello {{firstName}} {{lastName}}"`  
- **Complex Compositions**: Variables can reference other variables that contain variables

### Automatic Dimension Inheritance System

#### How It Works
Strings automatically inherit dimension values from variables used in their content:

1. **Variable Detection**: System scans string content for `{{variableName}}` patterns
2. **Dimension Collection**: Gathers all dimension values from referenced variables (both trait and string variables)
3. **Automatic Assignment**: Creates StringDimensionValue relationships for inherited values
4. **Real-time Updates**: Django signals trigger updates when variable dimension values change
5. **Visual Protection**: Inherited values shown with blue dashed borders and dots, cannot be manually deleted

#### Technical Implementation
- **Backend Method**: `update_dimension_values_from_variables()` handles inheritance logic
- **Django Signals**: Automatic updates when VariableDimensionValue or StringDimensionValue changes
- **Recursive Support**: String variables inherit from their embedded string variables
- **Frontend Protection**: `isDimensionValueInheritedFromVariables()` prevents deletion of inherited values

#### Example Flow
1. Variable A has dimension value "Email" for dimension "Type"
2. String B contains "{{VariableA}} footer"
3. String B automatically gets "Email" dimension value
4. When Variable A's dimension values change, String B updates automatically

### Circular Reference Protection

#### Prevention System
Comprehensive protection against self-reference and circular chains:

- **Self-Reference Detection**: Prevents strings from referencing themselves
- **Circular Chain Detection**: Prevents A → B → A patterns
- **Visited Set Tracking**: Uses Set data structure to track reference chains
- **Frontend Validation**: `detectCircularReferences()` validates before submission
- **Backend Validation**: `_detect_circular_references()` in StringSerializer
- **Clear Error Messages**: Specific messages identify the problematic variable

#### Implementation
- **Frontend Function**: `detectCircularReferences(content, currentStringId)`
- **Backend Method**: `_detect_circular_references(content, project, currentStringId, visited)`
- **Error Handling**: Prevents submission with clear user feedback
- **Depth Tracking**: Protects against complex multi-level circular references

### Variable Detection and Creation System

#### Automatic Variable Detection
When creating/editing strings, system automatically detects new variables:

- **Pattern Matching**: Regex finds all `{{variableName}}` patterns in content
- **Duplicate Prevention**: Checks both trait variables and string variables before creating
- **Smart Creation**: Only creates trait variables for truly new variable names
- **Reference Resolution**: Handles effective_variable_name, variable_name, and variable_hash

#### Fixed Variable Detection Bug
**CRITICAL FIX**: System previously incorrectly detected existing string variables as new trait variables:

- **Root Cause**: Variable detection only checked `project.variables` (trait variables) 
- **Solution**: Updated `closeStringDialog()` to check both trait and string variables
- **Implementation**: Added proper checks for all string variable reference methods
- **Result**: Eliminates duplicate variable creation and improves data integrity

### Key Relationships

- Projects contain Traits, Variables, Strings, and Dimensions
- VariableValues link Variables to Traits with specific values (can contain embedded variables)
- VariableDimensionValues link Variables to DimensionValues with values (can contain embedded variables)
- Strings automatically inherit dimension values from embedded variables via Django signals
- Every String is automatically a variable with either custom name or generated hash
- Circular reference protection prevents infinite loops in variable chains
- Variable embedding allows complex compositions within variable values

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login with username/password
- `POST /api/auth/logout/` - Logout current user
- `POST /api/auth/register/` - Register new user
- `GET /api/auth/me/` - Get current user info

### Projects
- `GET /api/projects/` - List user's projects
- `POST /api/projects/` - Create new project
- `GET /api/projects/{id}/` - Get project details (includes all related data)
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `POST /api/projects/{id}/download-csv/` - Download filtered CSV with current filter parameters

### Traits
- `POST /api/traits/` - Create new trait
- `PATCH /api/traits/{id}/` - Update trait
- `DELETE /api/traits/{id}/` - Delete trait

### Variables (Trait Variables Only)
- `POST /api/variables/` - Create new trait variable
  - Required: name, project
  - Optional: is_conditional (boolean)
- `PATCH /api/variables/{id}/` - Update variable
- `DELETE /api/variables/{id}/` - Delete variable

### Variable Values (Support Variable Embedding)
- `POST /api/variable-values/` - Create variable value for trait
  - Note: value field can contain {{variableName}} patterns
- `PATCH /api/variable-values/{id}/` - Update variable value
- `DELETE /api/variable-values/{id}/` - Delete variable value

### Variable Dimension Values (Support Variable Embedding)
- `POST /api/variable-dimension-values/` - Create variable dimension value
  - Note: value field can contain {{variableName}} patterns
- `PATCH /api/variable-dimension-values/{id}/` - Update variable dimension value
- `DELETE /api/variable-dimension-values/{id}/` - Delete variable dimension value

### Strings (String Variables)
- `POST /api/strings/` - Create new string
  - Required: content, project
  - Optional: variable_name (custom name), is_conditional (boolean)
  - Auto-generated: variable_hash (6-character unique hash)
- `PATCH /api/strings/{id}/` - Update string
- `DELETE /api/strings/{id}/` - Delete string

### Dimensions
- `POST /api/dimensions/` - Create new dimension
- `PATCH /api/dimensions/{id}/` - Update dimension
- `DELETE /api/dimensions/{id}/` - Delete dimension

### Dimension Values
- `POST /api/dimension-values/` - Create new dimension value
- `PATCH /api/dimension-values/{id}/` - Update dimension value
- `DELETE /api/dimension-values/{id}/` - Delete dimension value

### String Dimension Values (Automatic Inheritance)
- `GET /api/string-dimension-values/` - List string-dimension-value relationships
- `POST /api/string-dimension-values/` - Create manual assignment
- `DELETE /api/string-dimension-values/{id}/` - Delete manual assignment (inherited values protected)

## User Interface Design

### Layout Structure

The application uses a sophisticated three-panel layout system optimized for content management:

#### Three-Panel Layout Structure:
- **Left Panel (Filter Sidebar)**: Fixed 360px wide sidebar containing filtering controls with independent scrolling
- **Center Panel (Main Canvas)**: Flexible width area displaying project strings and main content with independent scrolling
- **Right Panel (Variables Sidebar)**: Collapsible 360px wide sidebar for trait variable management with independent scrolling

#### Global Navigation
- **App Header**: Full-width header with app name "Strings" and user authentication controls (sticky at top)
- **Project Header**: Full-width header beneath global navigation containing:
  - Project name (left side) with proper typography hierarchy
  - Action buttons (right side): "Manage Variables", "Edit Project", and overflow menu
  - **Overflow Menu**: Contains "Download CSV" (with Upload icon) and "Delete Project" separated by menu divider
  - The "Download CSV" option opens a confirmation dialog for filtered export
  - The "Manage Variables" button toggles the collapsible variables sidebar (trait variables only)
  - **Sticky positioning**: Remains visible while scrolling content below

### Left Panel: Filter Sidebar

#### Dimensions Section
- **Purpose**: Filter strings by dimension values
- **Icon**: Globe icon with semantic meaning
- **Functionality**: 
  - One section per dimension with dimension name as header
  - Clickable badges for each dimension value (single selection per dimension)
  - "Clear" button appears when a value is selected
  - Plus icon in section header for creating new dimensions
  - Edit buttons appear on hover for dimension management
- **Behavior**: Only strings with matching dimension values are shown (AND logic across dimensions)

#### Traits Section  
- **Purpose**: Control variable rendering context
- **Icon**: SwatchBook icon with semantic meaning
- **Functionality**:
  - Radio button selection including "Blank (Variables)" as first option
  - All project traits listed with edit buttons appearing on hover
  - Plus icon for creating new traits
  - Single selection determines how trait variables are rendered in strings

#### Conditionals Section
- **Purpose**: Control conditional content visibility  
- **Icon**: Signpost icon with semantic meaning
- **Functionality**:
  - Individual checkboxes for each conditional variable (both trait and string variables)
  - **String Variables**: Show with purple Spool icon for visual distinction
  - **Trait Variables**: Show with purple Signpost icon
  - Edit buttons appear on hover for conditional variable management
  - Multiple selection supported
  - Section only appears if conditional variables exist
- **Behavior**: Selected conditionals show their content, unselected are hidden

#### Visual Design Features:
- Fixed width of 360px with `bg-muted/40` background
- Consistent spacing with ml-6 content indentation  
- Hover interactions with `hover:bg-muted/50` for interactive elements
- Edit buttons with smooth opacity transitions (opacity-0 to opacity-100 on group-hover)
- Professional visual hierarchy with clear section separation
- **Independent Scrolling**: Content area scrolls independently while "Filters" header remains sticky

### Center Panel: Main Canvas

#### Canvas Header
- **Title**: "Project Strings" with proper typography hierarchy
- **Display Mode Controls**: Three toggle buttons with semantic color coding:
  1. **String Variables** (Green, `Spool` icon) - Controls string variable display mode
  2. **Highlight** (Yellow, `Highlighter` icon) - Controls plaintext vs badge mode 
  3. **Dimensions** (Blue, `Bookmark` icon) - Controls dimension tag visibility
- **Action Button**: "+ New String" button positioned at far right for optimal layout
- **Sticky positioning**: Header remains visible while scrolling through strings below

#### String Display Area
- **String Cards**: Clickable ShadCN Card components for each string
- **Purple Variable Badges**: Every string shows purple badge with {{effectiveVariableName}} and copy icon
- **Copy Functionality**: Copy button provides `{{variableName}}` format ready for pasting
- **Interactive Elements**: 
  - Entire card is clickable to edit string content
  - **Always-visible overflow menu** (MoreHorizontal icon) with "Delete" option
  - Variable badges in highlight mode with click prevention
  - Proper event handling (e.stopPropagation()) for nested interactions
- **Dimension Inheritance Display**: 
  - **Manual Values**: Gray borders with X button for removal
  - **Inherited Values**: Blue dashed borders with dots, no X button (cannot be removed)
  - **Visual Legend**: Shows inheritance indicators and meanings

### Right Panel: Variables Sidebar (Trait Variables Only)

#### Sidebar Structure
- **Header**: Contains "Variables" title and X close button (sticky positioning)
- **Content**: Trait variables management only (string variables removed from sidebar)
- **Footer**: "+ New Variable" button for creating trait variables
- **Behavior**: 
  - Collapsible drawer that pushes main content (not overlay)
  - Closed by default when entering project
  - Toggled via "Manage Variables" button in project header
  - Fixed width of 360px when open

#### Variable Management
- **Variable List**: All project trait variables with visual type indicators
  - **Conditional Variables**: Purple `Signpost` icon badge
- **Interactions**: 
  - All variables clickable for editing
  - Hover-triggered delete icons with opacity transitions
  - Proper event handling with `e.stopPropagation()` for delete buttons

### String Dialog System

#### Two-Tab Interface
- **Content Tab**: String content editing with textarea and variable insertion
- **Advanced Tab**: Conditional checkbox and custom variable name input

#### Content Tab Features
- **Auto-focus**: Content textarea automatically receives focus when dialog opens
- **Variable List**: Shows trait variables only (string variables accessible by typing/pasting)
- **Text Selection**: Smart text replacement functionality with visual feedback
- **Circular Reference Protection**: Validates content before submission

#### Advanced Tab Features
- **Conditional Checkbox**: Mark string as conditional to appear in conditionals sidebar
- **Custom Variable Name**: Optional custom name instead of auto-generated hash
- **Variable Name Validation**: Prevents duplicates within project

### Variable Dialog System (Trait Variables)

#### Three-Tab Interface
- **Overview Tab**: Variable name and conditional settings
- **Traits Tab**: Values for each trait in the project
- **Dimensions Tab**: Values for each dimension value with variable embedding support

#### Variable Embedding in Dimensions Tab
- **Embedded Variables Support**: Input fields accept {{variableName}} format
- **Clear Documentation**: Helper text explains variable embedding capability
- **Enhanced Placeholders**: Inputs show "(can include {{variables}})" hint
- **Processing**: Both frontend and backend process embedded variables during rendering

### Bulk String Management System

The application includes comprehensive bulk editing functionality for efficient string management:

#### Bulk Selection Interface
- **Individual Checkboxes**: Each string card has a checkbox on the left side for individual selection
- **Secondary Header**: Appears above strings with "Select All" checkbox and selection count
- **Floating Action Bar**: Positioned at bottom center when strings are selected, showing count and delete button
- **Selection State**: Uses Set data structure for O(1) performance with helper functions

#### Bulk Selection Behavior
- **Smart Selection**: Selection automatically cleared when filters (traits/dimensions) change
- **Individual Updates**: Deleted/converted strings automatically removed from selection
- **Select All Logic**: Checkbox shows indeterminate state when partially selected
- **Count Display**: Real-time count of selected strings in secondary header and floating bar

#### Bulk Operations
- **Bulk Delete**: 
  - Confirmation dialog with selected string count
  - Parallel deletion using Promise.all for performance
  - Proper error handling with toast notifications
  - Automatic project refresh after completion
- **Selection Management**: Clear selection after operations or filter changes

#### Technical Implementation
- **State Management**: `selectedStringIds` Set, `bulkDeleteDialog` boolean state
- **Helper Functions**: `handleSelectString`, `handleSelectAll`, `clearSelection`
- **Event Handling**: Proper `stopPropagation()` for checkbox interactions
- **React Hooks Compliance**: All hooks placed at component top following React rules

### UI Component System

#### ShadCN Components Used
- **Dialog**: All create/edit forms with height constraints and scroll behavior
- **Button**: Consistent styling with variants (default, secondary, destructive, outline)
- **Input/Label**: Form inputs with proper accessibility and consistent spacing
- **Select**: Trait selection with SelectSeparator for "Blank" option
- **MultiSelect**: Conditional variables and dimension values selection (custom component)
- **DropdownMenu**: Overflow menus for project actions with proper styling
- **Badge**: Variable indicators, dimension values, and type indicators
- **Sonner**: Toast notifications for user feedback
- **Card**: String display with clickable interaction design

#### Key UI Patterns

1. **Toggle Button System**: 
   - Semantic color coding (green/yellow/blue) for different functions
   - Meaningful Lucide icons for visual recognition
   - Consistent `variant="outline"` styling with custom active themes

2. **Clickable Interface Elements**:
   - Project tiles and string cards are fully clickable surfaces
   - Variable cards in sidebar are fully clickable for editing
   - Proper event handling for nested interactive elements
   - Stop propagation for delete buttons on strings and variables
   - Hover-triggered delete icons on both string cards and variable cards

3. **Dialog System Enhancements**:
   - **Responsive Height Layout**: All major dialogs (strings, variables, dimensions) use `max-h-[80vh]` to adapt to content while preventing overflow
   - **Sticky Header/Footer**: Headers and footers remain fixed while content scrolls independently
        - **Structured Layout**: Fixed header (`px-6 py-4 border-b`), scrollable content (`flex-1 overflow-y-auto px-6 py-4`), fixed footer (`px-6 py-4 border-t`)
     - **String Dialog Tabs**: Uses ShadCN Tabs component in header for "Content" and "Dimensions" tabs, maintaining sticky navigation
     - **Auto-focus**: Content textarea automatically receives focus when string dialog opens
        - **Form Integration**: Submit buttons in footer use `form` attribute to work with forms in scrollable content
     - **Pre-populated forms** for edit operations with proper validation
     - **String Sorting**: All strings are sorted by creation date (newest first) using `sortProjectStrings()` helper function

4. **Form Standardization**:
   - Consistent `space-y-2` spacing between form elements
   - Proper Label components with `htmlFor`/`id` attributes
   - Helper text styling and error handling patterns

5. **Typography Hierarchy**:
   - App name: `text-2xl font-bold tracking-tight`
   - Project name: `text-xl font-semibold`  
   - Section headers: `text-lg font-semibold`
   - Clear visual distinction between hierarchy levels

6. **Consistent Padding System**:
   - Uniform 24px (`px-6`) padding across all headers and content areas
   - Applied to app header, project header, filter sidebar, strings canvas, and variables sidebar

## String Rendering System

The application features a sophisticated string rendering system that handles multiple display modes, variable types, and embedded variables.

### Display Mode Controls

#### Show String Variables Toggle
**CRITICAL**: This toggle affects ONLY string variables, NOT trait variables:

- **When OFF (default state)**:
  - String variables: Show their actual content (referenced string content)
  - Trait variables: Show their trait-specific values (ALWAYS)
  
- **When ON**:
  - String variables: Display as {{variableName}} instead of expanding content
  - Trait variables: Continue to show their trait-specific values (UNCHANGED)

#### Highlight Toggle (Plaintext vs Styled Mode)
- **OFF (Plaintext Mode)**: Variables are replaced with their actual values as plain text
- **ON (Styled Mode - DEFAULT)**: Variables show as colored/grey badges with interaction

#### Dimensions Toggle
- **OFF**: Dimension tags are hidden from string display
- **ON**: Dimension tags show as blue badges below string content

### Variable Embedding Processing

#### Recursive Variable Expansion
When variables contain embedded variables, the system processes them recursively:

1. **Pattern Detection**: Finds all {{variableName}} patterns in variable values
2. **Context-Aware Processing**: Uses current trait and dimension filter selections
3. **Recursive Resolution**: Handles variables that reference other variables
4. **Infinite Loop Protection**: Limits recursion depth to 10 levels
5. **Mixed Variable Types**: Supports embedding both trait and string variables

#### Frontend Processing
- **Function**: `processVariableContent(content, depth)` with recursion protection
- **Integration**: Works with `getVariableValueWithDimensionPrecedence()` for consistent rendering
- **Real-time Updates**: Processes embedded variables as user changes filters

#### Backend Processing
- **Method**: `_process_variable_content()` with depth tracking
- **API Integration**: Processes embedded variables in `_get_variable_replacement()`
- **Export Consistency**: CSV exports include processed embedded variables

### Rendering Behavior by Mode

#### Styled Mode (Highlight ON, Default):
- **Trait Variables**: Show as colored badges (green=has value, red=no value) with embedded variable processing
- **String Variables**: 
  - When showStringVariables=OFF: Show referenced string content with recursive processing
  - When showStringVariables=ON: Show as grey {{variable}} badges
- **Conditional Variables**: Only show if selected in conditionals selector

#### Plaintext Mode (Highlight OFF):
- **Trait Variables**: Replaced with trait-specific values (processed for embedded variables) or variable name if no value
- **String Variables**:
  - When showStringVariables=OFF: Show referenced string content with recursive processing
  - When showStringVariables=ON: Show as {{variable}} text
- **Conditional Variables**: Only show if selected in conditionals selector

## Automatic Dimension Inheritance System

### How Inheritance Works

#### Inheritance Flow
1. **String Analysis**: System scans string content for {{variableName}} patterns
2. **Variable Lookup**: Finds referenced trait and string variables
3. **Dimension Collection**: Gathers dimension values from all referenced variables
4. **Recursive Processing**: For string variables, recursively processes their content
5. **Automatic Assignment**: Creates StringDimensionValue relationships for inherited values
6. **Signal Updates**: Django signals trigger updates when source variables change

#### Visual Distinction System
- **Manual Values**: 
  - Gray borders with X button for removal
  - User-assigned dimension values
  - Can be deleted by clicking X
- **Inherited Values**: 
  - Blue dashed borders with dots pattern
  - No X button (cannot be manually deleted)
  - Automatically managed by system
- **Visual Legend**: UI provides legend explaining the difference

#### Real-time Updates
- **Variable Changes**: When a variable's dimension values change, all strings using that variable update automatically
- **String Variable Changes**: When a string variable's dimension values change, strings referencing it update
- **Immediate Feedback**: Changes reflect immediately in the UI

### Technical Implementation

#### Backend Signals
- **VariableDimensionValue Changes**: Updates all strings containing the affected variable
- **StringDimensionValue Changes**: Updates all strings referencing the affected string variable
- **String Content Changes**: Updates dimension inheritance when string content changes

#### Frontend Protection
- **Inheritance Detection**: `isDimensionValueInheritedFromVariables()` with recursion protection
- **Deletion Prevention**: Inherited values cannot be manually deleted
- **Visual Feedback**: Clear indicators show which values are inherited vs manual

## Circular Reference Protection

### Protection Mechanisms

#### Frontend Validation
- **Function**: `detectCircularReferences(content, currentStringId)`
- **Validation Point**: Before string submission
- **Error Prevention**: Stops submission with clear error message
- **User Feedback**: Toast notifications explain the circular reference issue

#### Backend Validation
- **Method**: `_detect_circular_references()` in StringSerializer
- **Validation Point**: During string creation/update
- **Server-side Safety**: Prevents circular references even if frontend validation fails
- **Detailed Errors**: Specific messages identify problematic variable chains

#### Detection Algorithm
1. **Initialize Visited Set**: Track visited strings in current chain
2. **Parse Variables**: Extract {{variableName}} patterns from content
3. **Follow References**: Recursively check referenced string variables
4. **Detect Loops**: Identify when a string appears twice in chain
5. **Report Specific Error**: Clear message shows which variable causes the issue

### Error Handling
- **Self-Reference**: "String cannot reference itself through variable {{variableName}}"
- **Circular Chain**: "Circular reference detected involving variable {{variableName}}"
- **Prevention**: System blocks creation/update of problematic references

## CSV Export System

### Export Functionality Overview

#### Filtered Export Approach
- **User-Controlled**: Only exports strings matching current UI filter state
- **Variable Processing**: Exported strings include processed embedded variables
- **Manageable Files**: Avoids massive exports by respecting active filters
- **Transparent Process**: Users see exactly what will be exported before confirming

#### Export Processing with Variable Embedding
- **Backend Method**: `_process_string_content()` handles embedded variables during export
- **Context Preservation**: Uses current trait and dimension filter selections
- **Recursive Processing**: Handles nested variable references
- **Consistency**: Export output matches UI display exactly

### Backend Export Processing

#### String Processing Logic
1. **Conditional Variable Processing**: Remove unselected conditional variables
2. **Trait Variable Processing**: Use trait-specific values with embedded variable expansion
3. **String Variable Processing**: Recursively expand string variables with embedded processing
4. **Dimension Filtering**: Only include strings matching all selected dimension filters

#### Variable Embedding in Export
- **Embedded Variable Expansion**: Variables containing {{otherVariable}} are fully processed
- **Filter Context**: Embedded variables use current trait and dimension selections
- **Recursive Support**: Handles multiple levels of variable nesting
- **Performance**: Optimized processing with recursion limits

## Development Guidelines and Patterns

### String Variable System Guidelines
- **Every String is a Variable**: No variable checkbox, automatic hash generation
- **Effective Variable Name**: Use property that returns custom name or hash
- **Purple Badge Display**: Always show purple {{variableName}} badges on strings
- **Copy Functionality**: Provide copy button with double bracket format
- **Conditional Support**: Strings can be marked conditional and appear in sidebar

### Variable Embedding Guidelines
- **Embedding Syntax**: Use {{variableName}} format in variable values
- **Recursive Support**: Support nested variables with depth limits
- **Context Awareness**: Process embedded variables with current filter context
- **Both Variable Types**: Support embedding trait and string variables
- **Validation**: Check for circular references in embedded variables

### Dimension Inheritance Guidelines
- **Automatic Processing**: Use Django signals for real-time inheritance updates
- **Visual Protection**: Show inherited values with blue dashed borders
- **Manual vs Inherited**: Clear distinction between user-assigned and inherited values
- **Recursive Inheritance**: Support inheritance through string variable chains
- **Signal Efficiency**: Only update affected strings when variables change

### Circular Reference Guidelines
- **Dual Validation**: Implement both frontend and backend validation
- **Clear Messaging**: Provide specific error messages identifying problematic variables
- **Prevention First**: Block problematic submissions rather than cleanup after
- **Visited Tracking**: Use Set data structure for efficient cycle detection

### State Management Patterns
- Use React useState for component-level state
- Implement proper cleanup in useEffect hooks
- Follow established pattern of separate handlers for create vs edit operations
- Always reset form state when closing dialogs
- **Always refresh project data** after creating variables or strings to get updated relationships

### API Integration Best Practices
- Use consistent error handling with try/catch blocks
- Implement proper loading states for user feedback
- Follow RESTful conventions for endpoint design
- Use PATCH for updates, POST for creation, DELETE for removal
- Include variable embedding in API request/response processing

### Form Handling Patterns
- Pre-populate edit forms with existing data
- Implement proper validation before API calls
- Use controlled components for all form inputs
- Provide clear user feedback via toast notifications
- Support variable embedding in dimension value inputs

## Current State & Features

### Fully Implemented Features ✅

#### Revolutionary String Variable System
- ✅ **Every String is a Variable**: Automatic variable creation with hash generation
- ✅ **Dual Naming System**: Custom names or auto-generated 6-character hashes
- ✅ **Purple Badge Display**: Visual {{variableName}} badges with copy functionality
- ✅ **Conditional String Variables**: Strings can be marked conditional and appear in sidebar
- ✅ **Sidebar Cleanup**: String variables removed from variables sidebar dialog

#### Advanced Variable Embedding System
- ✅ **Embedded Variables in Dimension Values**: Variables can contain {{otherVariable}} patterns
- ✅ **Embedded Variables in Trait Values**: Trait variable values support embedding
- ✅ **Recursive Processing**: Multi-level variable nesting with infinite loop protection
- ✅ **Context-Aware Rendering**: Embedded variables use current trait/dimension filters
- ✅ **Backend Processing**: Server-side variable expansion for exports and API responses
- ✅ **Frontend Processing**: Client-side variable expansion for UI consistency

#### Automatic Dimension Inheritance
- ✅ **Inheritance Engine**: Strings automatically inherit dimension values from embedded variables
- ✅ **Real-time Updates**: Django signals trigger inheritance updates when variables change
- ✅ **Visual Protection System**: Inherited values shown with blue dashed borders and dots
- ✅ **Manual vs Inherited**: Clear distinction between user-assigned and inherited values
- ✅ **Recursive Inheritance**: Support inheritance through string variable chains
- ✅ **Deletion Prevention**: Inherited values cannot be manually deleted

#### Circular Reference Protection
- ✅ **Frontend Validation**: Pre-submission circular reference detection
- ✅ **Backend Validation**: Server-side protection with detailed error messages
- ✅ **Self-Reference Prevention**: Blocks strings from referencing themselves
- ✅ **Chain Detection**: Identifies complex A→B→C→A circular patterns
- ✅ **Clear Error Messages**: Specific feedback identifying problematic variables

#### Variable Detection and Creation
- ✅ **Fixed Detection Bug**: Proper handling of existing string variables vs new trait variables
- ✅ **Dual Variable System**: Correctly distinguishes trait and string variables
- ✅ **Smart Creation**: Only creates new variables when truly needed
- ✅ **Reference Resolution**: Handles effective_variable_name, variable_name, and variable_hash

#### Core Functionality
- ✅ **Authentication System**: Login, logout, registration with Django sessions
- ✅ **Project Management**: Full CRUD with overflow menus and project tiles
- ✅ **String Management**: Create, edit, delete strings with automatic variable creation
- ✅ **Trait Management**: Full CRUD with variable value management (supports embedding)
- ✅ **Dimension System**: Complete implementation with automatic inheritance

#### Advanced String Rendering
- ✅ **Show String Variables Toggle**: Controls string variable display mode independently
- ✅ **Highlight/Plaintext Modes**: Badge vs text rendering with embedded variable processing
- ✅ **Dimensions Toggle**: Show/hide dimension tags on strings
- ✅ **Nested Variable Support**: Recursive rendering with React key conflict resolution
- ✅ **Embedded Variable Processing**: Real-time processing of variables within variables

#### UI/UX Excellence
- ✅ **Three-Panel Layout**: Professional filter/content/management layout with independent scrolling
- ✅ **Semantic Toggle System**: Color-coded buttons with meaningful icons
- ✅ **Filter Sidebar**: Comprehensive filtering with dimension/trait/conditional controls
- ✅ **Variables Sidebar**: Collapsible trait variable management panel
- ✅ **Conditional Sidebar Enhancement**: Shows both trait and string variables with visual distinction
- ✅ **Purple Badge System**: Consistent {{variableName}} display with copy functionality
- ✅ **Form Standardization**: Consistent spacing, validation, and accessibility

#### Advanced Features
- ✅ **Bulk String Management**: Complete bulk selection and deletion system
- ✅ **CSV Import System**: Comprehensive import functionality with automatic variable detection
- ✅ **Tag-Based Dimension Selection**: Intuitive tag display with inheritance protection
- ✅ **Filtered CSV Export**: Smart export system with embedded variable processing
- ✅ **Dialog Height Management**: Responsive design with content-adaptive sizing
- ✅ **String Dialog Tabs**: Content and Advanced tabs with proper form structure
- ✅ **Variable Embedding UI**: Input hints and documentation for embedding syntax

### Technical Achievements ✅

#### Backend Architecture
- ✅ **Django Signals**: Automatic dimension inheritance with real-time updates
- ✅ **Variable Embedding Processing**: Recursive variable expansion with depth limits
- ✅ **Circular Reference Validation**: Server-side protection with detailed errors
- ✅ **Automatic Hash Generation**: Unique 6-character hash creation for strings
- ✅ **Mixed Variable Support**: Unified handling of trait and string variables

#### Frontend Architecture  
- ✅ **Variable Embedding Processing**: Client-side recursive variable expansion
- ✅ **Inheritance Visualization**: Blue dashed borders for inherited dimension values
- ✅ **Circular Reference Detection**: Pre-submission validation with user feedback
- ✅ **Smart Variable Creation**: Fixed detection bug preventing duplicates
- ✅ **Conditional Variable Display**: Enhanced sidebar with visual type indicators

#### Data Integrity
- ✅ **Constraint Validation**: Database-level uniqueness for names and values
- ✅ **Cascade Operations**: Proper handling of related data deletion and updates
- ✅ **Infinite Loop Protection**: Recursion limits in both backend and frontend
- ✅ **Reference Validation**: Comprehensive checks for variable existence and circularity

## Testing Guidelines

### Critical Test Areas

#### Variable Embedding System Testing
1. **Basic Embedding**: Test variables containing {{otherVariable}} in dimension values
2. **Recursive Embedding**: Test A contains B contains C chains
3. **Mixed Variable Types**: Test trait variables embedding string variables and vice versa
4. **Filter Context**: Verify embedded variables use current trait/dimension selections
5. **Infinite Loop Protection**: Test deeply nested chains reach recursion limits safely
6. **Export Consistency**: Verify CSV exports match UI display with embedded variables

#### Automatic Dimension Inheritance Testing
1. **Basic Inheritance**: String with {{variable}} inherits variable's dimension values
2. **Multiple Variables**: String with multiple variables inherits from all
3. **Real-time Updates**: Changes to variable dimension values update dependent strings
4. **String Variable Inheritance**: String variables inherit from their referenced strings
5. **Visual Protection**: Inherited values show blue dashed borders, cannot be deleted
6. **Manual vs Inherited**: User can add manual values alongside inherited ones

#### Circular Reference Protection Testing
1. **Self-Reference**: String cannot reference itself via {{selfName}}
2. **Simple Loops**: A→B→A pattern detection and prevention
3. **Complex Chains**: Multi-level A→B→C→A pattern detection
4. **Frontend Validation**: Pre-submission blocking with clear error messages
5. **Backend Validation**: Server-side protection as fallback
6. **Edit Operations**: Validation works for both new strings and edits

#### String Variable System Testing
1. **Automatic Variable Creation**: Every string becomes variable with hash
2. **Custom Names**: Optional custom variable names with validation
3. **Purple Badge Display**: {{effectiveName}} badges with copy functionality
4. **Conditional Strings**: String variables can be marked conditional
5. **Sidebar Removal**: String variables don't appear in variables sidebar
6. **Reference Resolution**: Strings can be referenced by name or hash

#### Variable Detection Bug Fix Testing
1. **Existing Variables**: System doesn't create duplicates for existing string variables
2. **New Variables**: System correctly creates trait variables for new variable names
3. **Mixed Detection**: Proper handling when content has both existing and new variables
4. **Reference Methods**: Handles variable_name, variable_hash, and effective_variable_name
5. **Creation Flow**: closeStringDialog() properly distinguishes variable types

#### Enhanced Conditional System Testing
1. **Dual Variable Types**: Both trait and string variables can be conditional
2. **Sidebar Display**: Conditional variables show with appropriate icons (Signpost/Spool)
3. **Visual Distinction**: Purple icons distinguish string vs trait conditionals
4. **Toggle Functionality**: Conditional variables can be enabled/disabled
5. **Content Removal**: Unselected conditionals are removed from rendered content

### Browser Compatibility
- **Modern Browsers**: Chrome, Firefox, Safari, Edge support
- **Responsive Design**: Mobile and tablet device compatibility
- **Accessibility**: Screen reader and keyboard navigation support

## Future Enhancement Areas

### Performance Optimization
- Bulk operations for variable embedding processing
- Lazy loading for large projects with complex variable chains
- Optimized inheritance calculations for projects with many variables

### Advanced Variable Features
- Variable categories or namespacing
- Advanced embedding syntax (conditionals within embeddings)
- Variable templates and reusable patterns
- Global variables across projects

### Enhanced Protection Systems
- Advanced circular reference detection (semantic analysis)
- Performance monitoring for complex variable chains
- User warnings for deeply nested variable structures
- Automatic optimization suggestions

### User Experience
- Visual variable relationship mapping
- Advanced search across embedded variables
- Drag-and-drop variable organization
- Real-time collaboration on variable-rich projects

---

**REMEMBER**: Keep this document updated with any changes made to the application. The revolutionary string variable system, automatic dimension inheritance, variable embedding capabilities, and circular reference protection represent major architectural achievements that future developers must understand and maintain properly.