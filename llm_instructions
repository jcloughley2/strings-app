This document is a reference for what this application is and how an LLM should contribute to it. 

**Introduction/Overview**

This application is called 'Strings'. It allows users to define text strings that have conditional content based on a selected trait. 

**What the Strings app does**

- Users can create projects.
- For a single project, users can define three separate types of data: Strings, variables, and traits. For each project, these should be stored and will be called in the UI in various places. Strings, variables, and traits can be created, read, updated and deleted.
    - Strings. When users create a string, which is actually a text string but can also include variables. An example string may be, "The {{animal}} is {{color}}".
    - Traits. Users can define traits. Example traits are "Good" and "Evil".
        - Strings (and particularly their variables) get presented differently, depending on which trait the user has selected at any point.
        - When the user creates or edits a trait, the user should be able to create/edit the name, and the value of each variable with respect to the trait.
    - Variables. Users can also define variables which can be used in a string. Variables can be defined independently, or as part of a string when the string is created or edited. Example variables may be, {{animal}}, {{color}} or {{eye-shape}}.
        - When the user creates or edits a variable, the user should be able to create/edit the name, and the value of the variable with respect to each trait.
        - Each variable has an array of values; a value for each trait.
    - As an example, if the project has string, "The {{animal}} is {{color}}" and variables "Good" and "Evil", and let's say when "Good" is selected, {{animal}} is "gerbil" and {{color}} is "blue", and when "Evil" is selected, {{animal}} is "snake" and {{color}} is "red". When Good is selected, the string will present as "The gerbil is blue" and when Evil is selected, the string will present as "The snake is red".
    - By using Django, users have standard functions for creating an account, logging in, logging out, etc.
    -Also in a project, present a 'Download' button. When clicked, the user should be able to download a CSV file of all the strings they created, represented for each trait. So each row is a string and then each column is a trait. each cell in the column has the string adjusted to show variable values for the trait of that column. The first row of this file can be the header row with the traits listed out. Reserve the first column for "Blank". While not really a trait, the "Blank" column can list out the strings where the variables show not as their variable value's but as their actual variable names represented in double brackets (Ex. {{animal}}).
    
    **UX specifications**
    
    This app should have a standard landing page where (when the user is logged in) they can view all their projects. 
    
    In a project detail page:
    
    - **Three-Panel Layout Structure**:
      - **Left Panel (Filter Sidebar)**: Fixed 264px wide sidebar containing filtering controls
      - **Center Panel (Main Canvas)**: Flexible width area displaying project strings and main content
      - **Right Panel (Variables Sidebar)**: Collapsible 288px wide sidebar for variable management
    
    - **Project Header**: Full-width header beneath global navigation containing:
      - Project name (left side)
      - Action buttons (right side): "Manage Variables", "Edit Project", and overflow menu with "Delete Project"
      - The "Manage Variables" button toggles the collapsible variables sidebar
    
    - **Filter Sidebar (Left Panel)**: Dedicated filtering controls including:
      - **Dimensions Section**: Filtering by dimension values with single selection per dimension and clear functionality
      - **Traits Section**: Radio button selection for trait contexts (including "Blank (Variables)" option)
      - **Conditionals Section**: Checkbox selection for conditional variables (multiple selection supported)
    
    - **Main Canvas (Center Panel)**: Primary content area featuring:
      - **Canvas Header**: Contains "Project Strings" title and display mode toggles
      - **Display Mode Controls**: Three toggle buttons for String Variables (green), Highlight (yellow), and Dimensions (blue)
      - **String List**: Filtered and rendered strings based on current filter and display settings
      - **Action Button**: "+ New String" button for creating new strings
    
    - **Variables Sidebar (Right Panel)**: Collapsible management panel containing:
      - **Variables Tab Only**: Simplified to focus solely on variable management (Traits and Dimensions removed)
      - **Variable List**: All project variables with type indicators (String Ref and Conditional icons)
      - **Create Button**: "+ New Variable" button at the bottom
      - **Close Control**: X button in header to collapse the sidebar
      - **Push Behavior**: When open, pushes main canvas content (does not overlay)
    
    - **Dialog System**: All create/edit operations use modal dialogs:
      - String creation/editing with variable detection and dimension assignment
      - Variable creation with type selection (trait vs string) and conditional options
      - Trait creation/editing with variable value management
      - Dimension creation/editing with predefined values management
      - Project editing and deletion confirmations
    
    **Primary Technologies to be used**
    
    - Django
    - Shadcn design components and styles.
    
    **Instructions for the LLM**
    
    - Please ask before you install and start using any new technology, unless it is a required dependency of a technology/resource you have already been given permission to use.

## Application Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with ShadCN/UI components
- **State Management**: React useState and useEffect hooks
- **Authentication**: Cookie-based sessions with Django backend

### Backend (Django)
- **Location**: `/backend/`
- **Framework**: Django with Django REST Framework
- **Database**: SQLite (default Django setup)
- **Authentication**: Django's built-in session authentication
- **API**: RESTful endpoints with proper CORS configuration

## Data Models & Relationships

### Core Models
1. **Project**: Container for all user content
   - Fields: name, description, created_at, updated_at, user (foreign key)
   
2. **Trait**: Different contexts/modes for variable values
   - Fields: name, project (foreign key), created_at, updated_at
   
3. **Variable**: Reusable text placeholders with TWO TYPES:
   - **Trait Variables**: Traditional variables with different values per trait
   - **String Variables**: Variables that reference other strings in the project
   - Fields: name, project (foreign key), variable_type ('trait' or 'string'), referenced_string (foreign key, nullable), is_conditional (boolean), created_at, updated_at
   
4. **VariableValue**: Trait-specific values for TRAIT variables only
   - Fields: variable (foreign key), trait (foreign key), value, created_at, updated_at
   - Note: String variables don't use VariableValue - they reference strings directly
   
5. **String**: Main content with variables and conditionals
   - Fields: content, project (foreign key), created_at, updated_at
   
6. **Conditional**: Named conditional blocks within strings (DEPRECATED - now uses conditional variables)
   - Fields: name, project (foreign key), created_at, updated_at

7. **Dimension**: Categories for organizing/filtering strings
   - Fields: name, project (foreign key), created_at, updated_at
   - Constraints: unique_together = ['name', 'project'] (prevents duplicate dimension names within project)

8. **DimensionValue**: Predefined values for each dimension
   - Fields: dimension (foreign key), value, created_at, updated_at
   - Constraints: unique_together = ['dimension', 'value'] (prevents duplicate values within same dimension)

9. **StringDimensionValue**: Many-to-many relationship between strings and dimension values
   - Fields: string (foreign key), dimension_value (foreign key), created_at
   - Constraints: unique_together = ['string', 'dimension_value'] (prevents duplicate assignments)

### Variable Types Explained
1. **Trait Variables** (variable_type='trait'):
   - Have different values for each trait via VariableValue model
   - Traditional behavior: {{animal}} shows "dog" for trait A, "cat" for trait B
   
2. **String Variables** (variable_type='string'):
   - Reference another string in the project via referenced_string field
   - When rendered, they show the content of the referenced string
   - Can be created during string creation/editing with checkbox option
   - Example: {{footer}} might reference a string containing "Copyright 2024"

### Conditional Variables System
- Variables can be marked as conditional (is_conditional=True)
- Conditional variables appear in a special selector in the UI
- Users can toggle which conditional variables are "active"
- When a conditional variable is not selected, it's completely removed from string rendering
- This replaced the old [[conditional]] ... [[/]] block system

### Key Relationships
- Projects contain Traits, Variables, Strings, Conditionals, and Dimensions
- VariableValues link Variables to Traits with specific values (trait variables only)
- String variables link to other Strings via referenced_string field
- Strings can reference Variables via {{variable_name}} syntax
- Variables can be conditional and are toggled via UI selector
- Dimensions contain DimensionValues (one-to-many)
- Strings can be assigned DimensionValues via StringDimensionValue (many-to-many)
- Dimension names must be unique within a project
- DimensionValues must be unique within a dimension

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login with username/password
- `POST /api/auth/logout/` - Logout current user
- `POST /api/auth/register/` - Register new user
- `GET /api/auth/user/` - Get current user info

### Projects
- `GET /api/projects/` - List user's projects
- `POST /api/projects/` - Create new project
- `GET /api/projects/{id}/` - Get project details (includes all related data)
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `GET /api/projects/{id}/download-csv/` - Download project as CSV

### Traits
- `GET /api/projects/{project_id}/traits/` - List project traits
- `POST /api/traits/` - Create new trait
- `PATCH /api/traits/{id}/` - Update trait
- `DELETE /api/traits/{id}/` - Delete trait

### Variables
- `GET /api/projects/{project_id}/variables/` - List project variables
- `POST /api/variables/` - Create new variable
  - Required: name, project, variable_type ('trait' or 'string')
  - Optional: referenced_string (for string variables), is_conditional (boolean)
- `PATCH /api/variables/{id}/` - Update variable
- `DELETE /api/variables/{id}/` - Delete variable

### Variable Values
- `GET /api/variables/{variable_id}/values/` - List variable values by trait
- `POST /api/variable-values/` - Create variable value for trait
- `PATCH /api/variable-values/{id}/` - Update variable value
- `DELETE /api/variable-values/{id}/` - Delete variable value

### Strings
- `GET /api/projects/{project_id}/strings/` - List project strings
- `POST /api/strings/` - Create new string
- `PATCH /api/strings/{id}/` - Update string
- `DELETE /api/strings/{id}/` - Delete string

### Dimensions
- `GET /api/dimensions/` - List user's dimensions (filtered by project access)
- `POST /api/dimensions/` - Create new dimension
  - Required: name, project
- `PATCH /api/dimensions/{id}/` - Update dimension
- `DELETE /api/dimensions/{id}/` - Delete dimension

### Dimension Values
- `GET /api/dimension-values/` - List dimension values (filtered by user access)
- `POST /api/dimension-values/` - Create new dimension value
  - Required: dimension, value
- `PATCH /api/dimension-values/{id}/` - Update dimension value
- `DELETE /api/dimension-values/{id}/` - Delete dimension value

### String Dimension Values
- `GET /api/string-dimension-values/` - List string-dimension-value relationships
  - Optional query param: `?string={string_id}` to filter by string
- `POST /api/string-dimension-values/` - Create new string-dimension-value relationship
  - Required: string, dimension_value
- `DELETE /api/string-dimension-values/{id}/` - Delete relationship

## UI Components & Patterns

### ShadCN Components Used
- **Dialog**: For all create/edit forms (strings, traits, variables, dimensions)
- **Button**: Consistent styling with variants (default, secondary, destructive, outline)
- **Input/Label**: Form inputs with proper accessibility
- **Select**: Trait selection with SelectSeparator for "Blank" option
- **MultiSelect**: For conditional variables and dimension values selection (custom component)
- **Tabs**: Sidebar navigation between Variables, Traits, and Dimensions
- **DropdownMenu**: Overflow menus for project actions
- **Badge**: Variable indicators, dimension values, and type indicators
- **Sonner**: Toast notifications for user feedback
- **Popover**: Used within MultiSelect component for dropdown functionality

### Key UI Patterns
1. **Overflow Menus**: Used on project tiles and project detail pages
   - Consistent rectangular button with variant="secondary" and size="icon"
   - Options: Edit, Download CSV, Delete (Duplicate disabled)
   
2. **Clickable Cards**: Project tiles and sidebar items are fully clickable
   - Entire card surface is interactive except for overflow menu areas
   
3. **Dialog Forms**: All CRUD operations use modal dialogs
   - Pre-populated for edit operations
   - Proper form validation and error handling
   
4. **Real-time Updates**: UI reflects changes immediately
   - Trait selection updates string rendering
   - Conditional toggles update display instantly
   - Show String Variables toggle changes display mode

5. **Sidebar Tabs**: Three-tab sidebar for project management
   - **Variables Tab**: View, edit, delete variables; create new ones
   - **Traits Tab**: View, edit, delete traits; create new ones  
   - **Dimensions Tab**: View, edit, delete dimensions; create new ones; shows dimension values as grey badges

### Filter Sidebar (Left Panel)
The left sidebar provides comprehensive filtering controls for the main canvas:

1. **Dimension Filters**: Each dimension has its own section
   - Section header shows dimension name with globe icon and edit button on hover
   - Clickable badges for each dimension value (single selection per dimension)
   - "Clear" button appears when a value is selected
   - Only strings with matching dimension values are shown
   - Plus icon in section header for creating new dimensions

2. **Trait Filter**: Controls variable rendering mode
   - Section header with SwatchBook icon and plus icon for creating new traits
   - Radio button selection including "Blank (Variables)" as first option
   - All project traits with edit buttons appearing on hover
   - Single selection determines how trait variables are rendered in strings

3. **Conditional Filter**: Controls conditional content visibility
   - Section header with Signpost icon (only appears if conditional variables exist)
   - Individual checkboxes for each conditional variable with edit buttons on hover
   - Multiple selection supported
   - Selected conditionals show their content, unselected are hidden

4. **Visual Design**:
   - Fixed width of 264px with `bg-muted/40` background
   - Consistent spacing with ml-6 content indentation
   - Hover interactions with `hover:bg-muted/50` for interactive elements
   - Semantic icons for each section (Globe, SwatchBook, Signpost)
   - Edit buttons appear on hover with smooth opacity transitions

### Main UI Controls (Project Detail Page Header)
The project detail page header contains display mode controls:

1. **Show String Variables Toggle**: Switch for string variable display mode ONLY
   - **OFF (default)**: String variables show their actual string variable values (referenced string content)
   - **ON**: String variables show as their variable names in double brackets {{variableName}}
   - **IMPORTANT**: This toggle ONLY affects string variables, trait variables always show their trait-specific values
   - **In Plaintext Mode**: When ON, string variables appear as plain text in {{variableName}} format; when OFF, string variables expand to their content
   - **In Styled Mode**: When ON, string variables appear as grey badges with {{variableName}} format; when OFF, string variables expand to their content
   - Trait variables are NOT affected by this toggle and always show their trait-specific values

2. **Highlight Toggle**: Switch between styled and plaintext modes
   - OFF: Variables show as colored/grey badges with interaction
   - ON: Variables are replaced with their actual values as plain text

3. **Dimensions Toggle**: Controls dimension tag visibility
   - OFF: Dimension tags are hidden from string display
   - ON: Dimension tags show as blue badges below string content

### String Rendering System

The string rendering system has different behaviors based on the current UI toggles and trait selection:

#### Show String Variables Toggle Behavior
**CRITICAL**: The "Show String Variables" toggle affects ONLY string variables, NOT trait variables:

- **When OFF (default state)**:
  - String variables: Show their actual content (referenced string content)
  - Trait variables: Show their trait-specific values (ALWAYS)
  
- **When ON**:
  - String variables: Display as {{variableName}} instead of expanding content
  - Trait variables: Continue to show their trait-specific values (UNCHANGED)

#### Display Mode Combinations

1. **Plaintext Mode + Show String Variables OFF**:
   - String variables expand to their content
   - Trait variables show trait-specific values as plain text

2. **Plaintext Mode + Show String Variables ON**:
   - String variables show as plain text in {{variableName}} format
   - Trait variables show trait-specific values as plain text

3. **Styled Mode + Show String Variables OFF**:
   - String variables expand to their content (with recursive variable processing)
   - Trait variables show as colored badges with trait-specific values

4. **Styled Mode + Show String Variables ON**:
   - String variables show as grey badges with {{variableName}} format
   - Trait variables show as colored badges with trait-specific values

#### Trait Selection Impact
- **Blank selected**: Variables behave according to Show String Variables toggle
- **Specific trait selected**: Variables behave according to Show String Variables toggle
- The trait selection does NOT override the Show String Variables toggle behavior
The string rendering system is complex and handles multiple display modes:

#### Badge Mode (Styled, isPlaintext=false):
- **Trait Variables**: Show as colored badges (green=has value, red=no value)
- **String Variables**: 
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as grey {{variable}} badges
- **Conditional Variables**: Only show if selected in conditionals selector

#### Plaintext Mode (isPlaintext=true):
- **Trait Variables**: Replaced with trait-specific values or variable name if no value
- **String Variables**:
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as {{variable}} text
- **Conditional Variables**: Only show if selected in conditionals selector

#### Special Cases:
- **Blank Trait + showStringVariables=OFF**: String variables expand, trait variables show as {{variable}}
- **Blank Trait + showStringVariables=ON**: All variables show as {{variable}}
- **Selected Trait + showStringVariables=OFF**: String variables expand, trait variables show values
- **Selected Trait + showStringVariables=ON**: String variables show as badges, trait variables show values

### Variable Creation Workflows
1. **Manual Creation**: Via sidebar "New Variable" button
2. **Auto-Creation from Strings**: When {{newVariable}} is typed in string content
3. **String Variable Creation**: Via checkbox in string create/edit dialog
   - Checkbox: "Create a variable to reference this string"
   - Creates a string variable that references the current string
   - Works for both new strings and edited strings

### React Key Management
The string rendering system uses a sophisticated key generation system to avoid React key conflicts:
- **Base Keys**: Include string ID, depth, index, and variable name
- **Nested Content**: Uses keyPrefix parameter to ensure uniqueness
- **Format**: `str-${stringId}-${depth}-${type}-${index}-${variableName}`

## Recent Functionality & UX Enhancements

### String Variables System
- **Two Variable Types**: Traditional trait variables + new string variables
- **String Variable Creation**: Checkbox in string dialog to create variables that reference the string
- **String Variable Display Control**: "Show String Variables" toggle controls rendering mode
- **Database Schema**: Added variable_type, referenced_string, is_conditional fields to Variable model
- **API Support**: Updated serializers and views to handle string variable creation and rendering

### Conditional Variables System
- **Replaced Conditional Blocks**: Old [[conditional]]...[[/]] system replaced with conditional variables
- **is_conditional Field**: Variables can be marked as conditional
- **UI Selector**: MultiSelect component for toggling conditional variables
- **Dynamic Rendering**: Strings update immediately when conditionals are toggled
- **Sidebar Indicators**: Conditional variables show purple "Conditional" badges in sidebar

### Project Management & UI
- Project Tiles (Homepage):
  - Entire tile (including padding) is now clickable to open the project, except for the overflow menu.
  - Overflow menu button uses ShadCN's rectangular Button with variant="secondary" and size="icon" for a modern, consistent look.
  - Overflow menu appears on hover or when open, and remains visible while interacting.
  - Overflow menu options: Edit Project, Download CSV, Delete Project (Duplicate Project is present but disabled).
  - Edit and Delete actions open dialogs; Download CSV triggers an immediate download for that project.
- Project Detail Page:
  - The same overflow menu (with the same options and style) is present next to the "Add String" button.
  - The standalone Download CSV button has been removed; it's now in the overflow menu.
  - Edit and Delete dialogs are reused here for consistency.

### Dialogs & Actions
- Edit Project:  
  - Opens a modal with the same fields as the create project form, pre-filled for editing.
  - Updates the project name/description via a PATCH request.
- Delete Project:  
  - Opens a confirmation dialog.
  - Deletes the project and removes it from the UI (redirects to homepage if on the project page).
- Download CSV:  
  - Uses the latest CSV logic, including all trait/conditional combinations.

### Variable Management Enhancements
- **Type Selection**: Dropdown to choose between 'trait' and 'string' variable types
- **String Reference**: For string variables, optional dropdown to select which string to reference
- **Conditional Checkbox**: Option to make any variable conditional
- **Sidebar Badges**: Visual indicators for variable types ("String Ref", "Conditional")
- **Smart Defaults**: New variables default to trait type

### Trait Management System
- **Comprehensive CRUD**: Full create, read, update, delete functionality for traits
- **Variable Value Management**: When editing traits, users can set values for all project variables
- **Smart Pre-population**: Edit dialogs automatically load existing variable values
- **Sidebar Integration**: Traits in sidebar are clickable to open edit dialogs
- **Form Validation**: Required trait names with proper error handling
- **Toast Notifications**: Success/error feedback for all operations

### Dimension Management System
- **Full CRUD Operations**: Create, read, update, delete dimensions with validation
- **Multi-Select Dimension Values**: Strings can have MULTIPLE values per dimension for flexible categorization
- **String Assignment**: Strings can be assigned multiple dimension values per dimension for comprehensive categorization/filtering
- **Sidebar Display**: Dimensions in sidebar show their available values as grey badges
- **String Display**: Strings show their assigned dimension values as blue badges below content
  - **Multi-Value Display Format**: `DimensionName: value1, value2, value3` (comma-separated)
  - **Grouped by Dimension**: Multiple values for same dimension are combined into single badge
- **Validation Features**:
  - Prevents duplicate dimension names within a project (case-insensitive)
  - Prevents duplicate dimension values within the same dimension (case-insensitive)
  - Backend constraints enforce uniqueness via database models
- **UI Features**:
  - **MultiSelect Component**: Dropdown with checkboxes for selecting multiple predefined values
  - **Custom Value Entry**: Press Enter to add custom values not in predefined list
  - **Dimension edit modal**: Allows adding/editing/deleting dimension values
  - **String edit dialog**: Uses MultiSelect for dimension value selection
  - **Clear All functionality**: Button to reset all selected values for a dimension
  - Real-time validation with toast notifications for duplicates
- **Data Relationships**:
  - Dimension -> DimensionValue (one-to-many)
  - String -> DimensionValue (many-to-many via StringDimensionValue) - MULTIPLE relationships per dimension
  - Cascade updates when dimension values are modified

### CSV Export
- CSV export now includes a column for every combination of trait and conditional(s), with headers indicating the trait and which conditionals are enabled.

### UI/UX Improvements
- **Automatic Variable Detection**: When typing {{variable}} in string content, new variables are automatically created
- **String Variable Creation**: Easy workflow to create variables that reference strings
- **Real-time Rendering**: All display modes update immediately when toggles are changed
- **Consistent Key Generation**: Solved React key conflicts with sophisticated key generation system
- **Toast Notifications**: User feedback for all actions
- **Loading States**: Proper loading indicators for API operations

### Recent UI/UX Enhancements

#### Toggle Button System Redesign
- **Replaced Switch Components**: Converted to consistent toggle button design using ShadCN Button component
- **Three Toggle Buttons with Semantic Color Coding**:
  1. **String Variables** (Green, `Spool` icon) - Controls string variable display mode
  2. **Highlight** (Yellow, `Highlighter` icon) - Controls plaintext vs badge mode (renamed from "Plaintext")
  3. **Dimensions** (Blue, `Bookmark` icon) - Controls dimension tag visibility
- **Semantic Icons**: Each toggle uses meaningful Lucide icons for better visual recognition
- **Color-Coded Themes**: Active states use semantic colors (green/yellow/blue) for clear visual feedback
- **Consistent Styling**: All toggles use `variant="outline"` with custom active themes

#### Sidebar Icon System
- **Variable Type Icons**: Replaced text badges with semantic icons for space efficiency
  - **String Variables**: Green `Spool` icon badge (consistent with toggle button theme)
  - **Conditional Variables**: Purple `Signpost` icon badge
- **Compact Design**: Icons save space while maintaining clear type identification
- **Consistent Theming**: Icon colors match their respective toggle button themes

#### Dialog System Improvements
- **Height Constraint Fix**: Added `max-h-[calc(100vh-2rem)]` to prevent dialogs from overflowing viewport
- **Scroll Behavior**: Added `overflow-y-auto` for content that exceeds available height
- **Viewport Safety**: Ensures dialogs remain accessible with proper top/bottom margins
- **Universal Application**: Fix applies to all dialog types (string, variable, trait, dimension, project)

#### String Display Enhancements
- **Conditional Line Height**: 
  - `leading-normal` for plaintext mode (compact)
  - `leading-loose` for badge mode (better spacing around badges)
- **Button Layout Optimization**: Moved "New String" button to far right of canvas bar for better layout balance

#### Filter Sidebar Implementation
- **New Left Sidebar**: Dedicated 256px wide filter sidebar for comprehensive string filtering
- **Three-Panel Layout**: Filter sidebar (left) → Main canvas (center) → Management sidebar (right)
- **Moved Controls**: Trait and conditional selection relocated from header to filter sidebar
- **Streamlined Header**: Header now focuses on display mode toggles and actions
- **Real-Time Filtering**: String list updates immediately when filters change
- **Comprehensive Filtering System**:
  - **Dimension Filters**: Section per dimension with single-select clickable badges and clear functionality
  - **Trait Filter**: All traits plus "Blank" option with single selection
  - **Conditional Filter**: Individual checkboxes for multiple selection of conditional variables
- **Smart Empty States**: Shows appropriate messages for no strings vs no matches
- **Filter Logic**: AND operation across dimensions, strings without dimension values hidden when filters active

#### Project Header and Layout Restructure
- **Dedicated Project Header**: Full-width header beneath global navigation with project name and actions
- **Centralized Project Actions**: "Manage Variables", "Edit Project", and overflow menu with "Delete Project"
- **Overflow Menu Integration**: ShadCN DropdownMenu component with proper action handling
- **Three-Panel Layout**: Organized layout with filter sidebar (left), main canvas (center), and collapsible variables sidebar (right)
- **Variables Sidebar Reorganization**: 
  - Removed multi-tab system (Traits, Dimensions tabs eliminated)
  - Focused exclusively on Variables management
  - Collapsible drawer that pushes main content (not overlay)
  - Closed by default, toggled via "Manage Variables" button in project header
- **Streamlined Canvas Header**: "Project Strings" title with display mode toggles and "+ New String" action
- **Removed Redundancy**: Eliminated duplicate "Manage Variables" button from filter sidebar footer

#### Enhanced Interactive Design
- **Semantic Icon System**: Globe (Dimensions), SwatchBook (Traits), Signpost (Conditionals)
- **Hover Interactions**: Edit buttons appear on hover throughout filter sidebar
- **Visual Hierarchy**: Proper content indentation (ml-6) and consistent spacing
- **Professional Layout**: Clear separation of concerns between filtering, content, and management
- **Accessibility Improvements**: Full-width clickable areas for dimension headers and trait/conditional options

## Implementation Guidelines for Future Development

### State Management Patterns
- Use React useState for component-level state
- Implement proper cleanup in useEffect hooks
- Follow the established pattern of separate handlers for create vs edit operations
- Always reset form state when closing dialogs

### Variable System Guidelines
- **Always specify variable_type** when creating variables ('trait' or 'string')
- **String variables** should reference another string via referenced_string field
- **Trait variables** use VariableValue model for trait-specific values
- **Conditional variables** can be either type, marked with is_conditional=True

### String Rendering Guidelines
- **Use renderContentRecursively** for styled mode with proper keyPrefix for uniqueness
- **Use processStringContent** for plaintext mode
- **Respect toggle states**: showStringVariables, isPlaintext, selectedConditionalVariables
- **Handle nested string variables** by passing unique keyPrefix to prevent React key conflicts

### Dimension Management Guidelines
- **Dimension Creation**: Include validation for unique names within project scope
- **Dimension Values**: Allow predefined values for consistency, but permit custom values for flexibility
- **Multi-Select Implementation**: Use arrays to handle multiple dimension values per dimension per string
- **String Assignment**: Create multiple StringDimensionValue relationships for each selected dimension value
- **Cascade Updates**: When updating dimension values, recreate all string-dimension-value relationships
- **UI Display**: 
  - Show dimension values as blue badges on string cards (below content, above border)
  - **Multi-Value Format**: Group values by dimension and display as "DimensionName: value1, value2, value3"
  - Use `bg-blue-50 text-blue-700 border-blue-200` styling for consistency
- **Form Handling**: 
  - Use MultiSelect component for predefined value selection
  - Support custom value entry via Enter key in input field
  - Pre-populate arrays of dimension values when editing strings
  - Provide "Clear All" functionality to reset dimension selections
- **State Management**: Use `{[dimensionId: number]: string[]}` format for dimension value state

### API Integration Best Practices
- Use consistent error handling with try/catch blocks
- Implement proper loading states for user feedback
- Follow RESTful conventions for endpoint design
- Use PATCH for updates, POST for creation, DELETE for removal
- **Always refresh project data** after creating variables or strings to get updated relationships

### Form Handling Patterns
- Pre-populate edit forms with existing data
- Implement proper validation before API calls
- Use controlled components for all form inputs
- Provide clear user feedback via toast notifications
- **Handle string variable creation** via checkbox in string dialogs

### Dialog Management
- Use boolean state variables for dialog visibility
- Implement separate open/close handler functions
- Clear form state when dialogs close
- Use descriptive dialog titles that reflect create vs edit mode

### Sidebar Integration
- Make all sidebar items clickable for quick access
- Use consistent styling for interactive elements
- Implement hover states for better UX
- Group related functionality logically
- **Show variable type badges** for quick identification

### Layout and Sidebar Patterns
- **Three-Panel Layout**: Filter sidebar (264px) → Main canvas (flexible) → Variables sidebar (288px, collapsible)
- **Project Header**: Full-width header with project name (left) and actions (right)
- **Filter Sidebar**: Fixed left panel with semantic icons (Globe, SwatchBook, Signpost) and hover interactions
- **Variables Sidebar**: Collapsible right panel that pushes content (no overlay), closed by default
- **Sidebar State Management**: Use boolean `isVariablesSidebarOpen` for variables sidebar visibility
- **Hover Interactions**: Edit buttons with opacity transitions (opacity-0 to opacity-100 on group-hover)
- **Content Indentation**: Use ml-6 for content alignment with section headers
- **Responsive Behavior**: Ensure layout works across different screen sizes
- **Visual Hierarchy**: Clear separation between filtering, content display, and management functions

## Development: Activating the Backend Virtual Environment

To activate the Python virtual environment for the backend, use the following command from the project root:

    source backend/venv/bin/activate

Or, if you are already in the backend directory:

    source venv/bin/activate

Once activated, you can run Django management commands as needed.

## Development Setup & Commands

### Backend Setup
```bash
cd backend
source venv/bin/activate
pip install -r requirements.txt
python manage.py migrate
python manage.py runserver
```

### Frontend Setup
```bash
cd frontend
npm install
npm run dev
```

### Common Development Tasks
- **Database Migrations**: `python manage.py makemigrations` then `python manage.py migrate`
- **Create Superuser**: `python manage.py createsuperuser`
- **Install Frontend Dependencies**: `npm install <package-name>`
- **Add ShadCN Components**: `npx shadcn@latest add <component-name>`

## Current State & Known Issues

### Working Features
- ✅ String variables creation and rendering
- ✅ Conditional variables system
- ✅ Show String Variables toggle
- ✅ Both plaintext and styled rendering modes
- ✅ Automatic variable detection in string content
- ✅ React key conflict resolution
- ✅ Full CRUD for all entity types (projects, strings, variables, traits, dimensions)
- ✅ Multi-select dimension values (multiple values per dimension per string)
- ✅ Dimension management with comprehensive value assignment
- ✅ Validation for duplicate dimension names and values
- ✅ Dimension value display on string cards as blue badges with comma-separated format
- ✅ Real-time UI updates
- ✅ Toggle button system with semantic icons and color coding
- ✅ Sidebar icon system for variable types
- ✅ Dialog height constraints and scroll behavior
- ✅ Responsive string display with conditional line height
- ✅ Filter sidebar with dimension, trait, and conditional filtering
- ✅ Three-panel layout with dedicated filter controls
- ✅ Real-time string filtering with AND logic across dimensions
- ✅ Streamlined header with focus on display mode toggles
- ✅ Project header with centralized actions and overflow menu
- ✅ Collapsible variables sidebar with push behavior
- ✅ Variables-only management sidebar (traits/dimensions removed)
- ✅ Enhanced hover interactions and edit functionality throughout filter sidebar
- ✅ Semantic icon system for filter sections and variable types
- ✅ Professional three-panel layout with clear separation of concerns

### Technical Notes
- **Database migrations applied**: Variable model includes variable_type, referenced_string, is_conditional fields
- **API serialization**: Updated to handle string variables and conditional flags
- **Frontend state management**: Multiple toggle states coordinate string rendering
- **Key generation**: Uses sophisticated system to prevent React key conflicts in nested content
- **Dimension system**: Full implementation with migrations 0006-0008 for dimensions, dimension values, and string assignments
- **Validation constraints**: Database-level unique constraints for dimension names and values prevent duplicates
- **UI consistency**: Blue badges for dimension values, grey badges for dimension values in sidebar

### Areas for Future Enhancement
- Performance optimization for large projects with many nested string variables
- Bulk operations for variables and strings
- Export formats beyond CSV
- Advanced conditional logic (AND/OR operations)
- Variable categories or namespacing
- Undo/redo functionality

## Testing & Quality Assurance

### Key Areas to Test
1. **Authentication Flow**: Login, logout, registration
2. **CRUD Operations**: All create, read, update, delete functionality
3. **String Rendering**: Variable substitution with all toggle combinations
4. **String Variables**: Creation, reference resolution, display modes
5. **Conditional Variables**: Selection, rendering, toggle behavior
6. **Dimension Management**: Creation, value assignment, string categorization, validation
7. **CSV Export**: Proper formatting with all trait/conditional combinations
8. **Real-time Updates**: UI responsiveness to state changes
9. **Form Validation**: Error handling and user feedback
10. **React Key Uniqueness**: No console errors for duplicate keys

### Testing Scenarios
- Create string variables both manually and via string dialog checkbox
- Test all combinations of trait selection, conditional selection, and display toggles
- Verify nested string variables render correctly without key conflicts
- Test CSV export with various conditional and trait combinations
- Ensure automatic variable detection works when typing in string content
- **Multi-Select Dimension Values**:
  - Create dimensions with predefined values and assign multiple values per dimension to strings
  - Test MultiSelect component functionality (select/deselect multiple values)
  - Test custom value entry via Enter key in input field
  - Verify "Clear All" functionality resets all selected values
  - Test dimension value validation (no duplicates within same dimension)
  - Test dimension name validation (no duplicates within same project)
  - Verify multiple dimension values display correctly as comma-separated format on string cards
  - Test dimension value updates cascade properly to all assigned strings
- **UI/UX Enhancements**:
  - Test toggle button functionality with semantic icons and color themes
  - Verify sidebar variable type icons display correctly (Spool for string, Signpost for conditional)
  - Test dialog height constraints with long content (should scroll, not overflow)
  - Verify conditional line height changes between plaintext and badge modes
- **Filter Sidebar Functionality**:
  - Test dimension filtering with single selection per dimension
  - Verify trait filtering affects variable rendering correctly
  - Test conditional filtering with multiple selection
  - Verify "Clear" buttons reset individual dimension filters
  - Test combination filtering (dimension + trait + conditional)
  - Verify empty states show correctly for no strings vs no matches
  - Test filter sidebar responsiveness and layout
- **Project Header and Layout**:
  - Test "Manage Variables" button toggles variables sidebar correctly
  - Verify "Edit Project" opens dialog with pre-filled values
  - Test overflow menu (DropdownMenu) with "Delete Project" action
  - Verify project deletion confirmation and redirect to homepage
  - Test project header responsiveness and action button layout
  - Verify project name displays correctly and truncates if needed
- **Variables Sidebar (Collapsible)**:
  - Test variables sidebar opens/closes via "Manage Variables" button
  - Verify sidebar pushes main canvas content (no overlay)
  - Test X close button in variables sidebar header
  - Verify sidebar is closed by default when entering project page
  - Test variables list with type indicators (Spool and Signpost icons)
  - Verify "+ New Variable" button functionality within sidebar
  - Test sidebar responsiveness and fixed width behavior
- **Three-Panel Layout Integration**:
  - Test layout behavior with variables sidebar open/closed
  - Verify filter sidebar remains fixed width during variables sidebar toggle
  - Test main canvas content reflow when variables sidebar opens/closes
  - Verify all three panels work together without layout conflicts
  - Test responsive behavior on different screen sizes
- **Filter Sidebar Interactive Elements**:
  - Test hover interactions for dimension headers with edit buttons
  - Verify trait radio buttons with hover edit functionality
  - Test conditional checkboxes with hover edit buttons
  - Verify plus icons in section headers open appropriate create dialogs
  - Test semantic icons display correctly (Globe, SwatchBook, Signpost)
  - Verify content indentation (ml-6) and visual hierarchy
- **Cross-Feature Integration**:
  - Test strings with both variables and multiple dimension values
  - Verify all toggle combinations work with multi-dimensional strings
  - Test editing strings that have multiple dimension values assigned
  - Test filter sidebar with all toggle combinations
  - Verify filtered strings render correctly in both plaintext and styled modes
  - Test variables sidebar operations while filters are active
  - Verify project actions work correctly with active filters
  - Test dialog operations (create/edit) with three-panel layout

### Browser Compatibility
- Ensure compatibility with modern browsers (Chrome, Firefox, Safari, Edge)
- Test responsive design on mobile and tablet devices
- Verify accessibility features work properly