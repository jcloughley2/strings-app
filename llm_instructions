This document is a reference for what this application is and how an LLM should contribute to it. 

**Introduction/Overview**

This application is called 'Strings'. It allows users to define text strings that have conditional content based on a selected trait. 

**What the Strings app does**

- Users can create projects.
- For a single project, users can define three separate types of data: Strings, variables, and traits. For each project, these should be stored and will be called in the UI in various places. Strings, variables, and traits can be created, read, updated and deleted.
    - Strings. When users create a string, which is actually a text string but can also include variables. An example string may be, "The {{animal}} is {{color}}".
    - Traits. Users can define traits. Example traits are "Good" and "Evil".
        - Strings (and particularly their variables) get presented differently, depending on which trait the user has selected at any point.
        - When the user creates or edits a trait, the user should be able to create/edit the name, and the value of each variable with respect to the trait.
    - Variables. Users can also define variables which can be used in a string. Variables can be defined independently, or as part of a string when the string is created or edited. Example variables may be, {{animal}}, {{color}} or {{eye-shape}}.
        - When the user creates or edits a variable, the user should be able to create/edit the name, and the value of the variable with respect to each trait.
        - Each variable has an array of values; a value for each trait.
    - As an example, if the project has string, "The {{animal}} is {{color}}" and variables "Good" and "Evil", and let's say when "Good" is selected, {{animal}} is "gerbil" and {{color}} is "blue", and when "Evil" is selected, {{animal}} is "snake" and {{color}} is "red". When Good is selected, the string will present as "The gerbil is blue" and when Evil is selected, the string will present as "The snake is red".
    - By using Django, users have standard functions for creating an account, logging in, logging out, etc.
    -Also in a project, present a 'Download' button. When clicked, the user should be able to download a CSV file of all the strings they created, represented for each trait. So each row is a string and then each column is a trait. each cell in the column has the string adjusted to show variable values for the trait of that column. The first row of this file can be the header row with the traits listed out. Reserve the first column for "Blank". While not really a trait, the "Blank" column can list out the strings where the variables show not as their variable value's but as their actual variable names represented in double brackets (Ex. {{animal}}).
    
    **UX specifications**
    
    This app should have a standard landing page where (when the user is logged in) they can view all their projects. 
    
    In a project detail page:
    
    - The main content of the page should be all the strings in the project, listed out.
    - In a tabbed sidebar to the right of the page, In tab 1 (Variables) the user can see, edit and delete their variables as well as create new ones. In tab 2 (Traits) the user can see, edit and delete their traits as well as create new ones.
    - In a project, when a user goes to create or edit a string, trait, or variable - doing so should open up these flows in a dialog box that can then be saved and the page be updated with the change.
    
    **Primary Technologies to be used**
    
    - Django
    - Shadcn design components and styles.
    
    **Instructions for the LLM**
    
    - Please ask before you install and start using any new technology, unless it is a required dependency of a technology/resource you have already been given permission to use.

## Application Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with ShadCN/UI components
- **State Management**: React useState and useEffect hooks
- **Authentication**: Cookie-based sessions with Django backend

### Backend (Django)
- **Location**: `/backend/`
- **Framework**: Django with Django REST Framework
- **Database**: SQLite (default Django setup)
- **Authentication**: Django's built-in session authentication
- **API**: RESTful endpoints with proper CORS configuration

## Data Models & Relationships

### Core Models
1. **Project**: Container for all user content
   - Fields: name, description, created_at, updated_at, user (foreign key)
   
2. **Trait**: Different contexts/modes for variable values
   - Fields: name, project (foreign key), created_at, updated_at
   
3. **Variable**: Reusable text placeholders with TWO TYPES:
   - **Trait Variables**: Traditional variables with different values per trait
   - **String Variables**: Variables that reference other strings in the project
   - Fields: name, project (foreign key), variable_type ('trait' or 'string'), referenced_string (foreign key, nullable), is_conditional (boolean), created_at, updated_at
   
4. **VariableValue**: Trait-specific values for TRAIT variables only
   - Fields: variable (foreign key), trait (foreign key), value, created_at, updated_at
   - Note: String variables don't use VariableValue - they reference strings directly
   
5. **String**: Main content with variables and conditionals
   - Fields: content, project (foreign key), created_at, updated_at
   
6. **Conditional**: Named conditional blocks within strings (DEPRECATED - now uses conditional variables)
   - Fields: name, project (foreign key), created_at, updated_at

### Variable Types Explained
1. **Trait Variables** (variable_type='trait'):
   - Have different values for each trait via VariableValue model
   - Traditional behavior: {{animal}} shows "dog" for trait A, "cat" for trait B
   
2. **String Variables** (variable_type='string'):
   - Reference another string in the project via referenced_string field
   - When rendered, they show the content of the referenced string
   - Can be created during string creation/editing with checkbox option
   - Example: {{footer}} might reference a string containing "Copyright 2024"

### Conditional Variables System
- Variables can be marked as conditional (is_conditional=True)
- Conditional variables appear in a special selector in the UI
- Users can toggle which conditional variables are "active"
- When a conditional variable is not selected, it's completely removed from string rendering
- This replaced the old [[conditional]] ... [[/]] block system

### Key Relationships
- Projects contain Traits, Variables, Strings, and Conditionals
- VariableValues link Variables to Traits with specific values (trait variables only)
- String variables link to other Strings via referenced_string field
- Strings can reference Variables via {{variable_name}} syntax
- Variables can be conditional and are toggled via UI selector

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login with username/password
- `POST /api/auth/logout/` - Logout current user
- `POST /api/auth/register/` - Register new user
- `GET /api/auth/user/` - Get current user info

### Projects
- `GET /api/projects/` - List user's projects
- `POST /api/projects/` - Create new project
- `GET /api/projects/{id}/` - Get project details (includes all related data)
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `GET /api/projects/{id}/download-csv/` - Download project as CSV

### Traits
- `GET /api/projects/{project_id}/traits/` - List project traits
- `POST /api/traits/` - Create new trait
- `PATCH /api/traits/{id}/` - Update trait
- `DELETE /api/traits/{id}/` - Delete trait

### Variables
- `GET /api/projects/{project_id}/variables/` - List project variables
- `POST /api/variables/` - Create new variable
  - Required: name, project, variable_type ('trait' or 'string')
  - Optional: referenced_string (for string variables), is_conditional (boolean)
- `PATCH /api/variables/{id}/` - Update variable
- `DELETE /api/variables/{id}/` - Delete variable

### Variable Values
- `GET /api/variables/{variable_id}/values/` - List variable values by trait
- `POST /api/variable-values/` - Create variable value for trait
- `PATCH /api/variable-values/{id}/` - Update variable value
- `DELETE /api/variable-values/{id}/` - Delete variable value

### Strings
- `GET /api/projects/{project_id}/strings/` - List project strings
- `POST /api/strings/` - Create new string
- `PATCH /api/strings/{id}/` - Update string
- `DELETE /api/strings/{id}/` - Delete string

## UI Components & Patterns

### ShadCN Components Used
- **Dialog**: For all create/edit forms (strings, traits, variables)
- **Button**: Consistent styling with variants (default, secondary, destructive)
- **Input/Label**: Form inputs with proper accessibility
- **Select**: Trait selection with SelectSeparator for "Blank" option
- **MultiSelect**: For conditional variables selection (custom component)
- **Switch**: For plaintext mode and "Show String Variables" toggle
- **Tabs**: Sidebar navigation between Variables and Traits
- **DropdownMenu**: Overflow menus for project actions
- **Badge**: Variable and conditional indicators in strings
- **Sonner**: Toast notifications for user feedback

### Key UI Patterns
1. **Overflow Menus**: Used on project tiles and project detail pages
   - Consistent rectangular button with variant="secondary" and size="icon"
   - Options: Edit, Download CSV, Delete (Duplicate disabled)
   
2. **Clickable Cards**: Project tiles and sidebar items are fully clickable
   - Entire card surface is interactive except for overflow menu areas
   
3. **Dialog Forms**: All CRUD operations use modal dialogs
   - Pre-populated for edit operations
   - Proper form validation and error handling
   
4. **Real-time Updates**: UI reflects changes immediately
   - Trait selection updates string rendering
   - Conditional toggles update display instantly
   - Show String Variables toggle changes display mode

### Main UI Controls (Project Detail Page Header)
The project detail page header contains several important controls:

1. **Trait Selector**: Dropdown to select which trait to view
   - Includes all project traits plus "Blank" option
   - Changes how trait variables are rendered in strings

2. **Conditionals Selector**: MultiSelect for conditional variables
   - Shows only variables where is_conditional=True
   - Selected conditionals are "active" and show in strings
   - Unselected conditionals are hidden from string rendering

3. **Show String Variables Toggle**: Switch for string variable display mode
   - OFF (default): String variables show their referenced string content
   - ON: String variables show as grey {{variable}} badges
   - Works with both plaintext and styled modes

4. **Plaintext Toggle**: Switch between styled and plaintext modes
   - OFF: Variables show as colored/grey badges with interaction
   - ON: Variables are replaced with their actual values as plain text

### String Rendering System
The string rendering system is complex and handles multiple display modes:

#### Badge Mode (Styled, isPlaintext=false):
- **Trait Variables**: Show as colored badges (green=has value, red=no value)
- **String Variables**: 
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as grey {{variable}} badges
- **Conditional Variables**: Only show if selected in conditionals selector

#### Plaintext Mode (isPlaintext=true):
- **Trait Variables**: Replaced with trait-specific values or variable name if no value
- **String Variables**:
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as {{variable}} text
- **Conditional Variables**: Only show if selected in conditionals selector

#### Special Cases:
- **Blank Trait + showStringVariables=OFF**: String variables expand, trait variables show as {{variable}}
- **Blank Trait + showStringVariables=ON**: All variables show as {{variable}}
- **Selected Trait + showStringVariables=OFF**: String variables expand, trait variables show values
- **Selected Trait + showStringVariables=ON**: String variables show as badges, trait variables show values

### Variable Creation Workflows
1. **Manual Creation**: Via sidebar "New Variable" button
2. **Auto-Creation from Strings**: When {{newVariable}} is typed in string content
3. **String Variable Creation**: Via checkbox in string create/edit dialog
   - Checkbox: "Create a variable to reference this string"
   - Creates a string variable that references the current string
   - Works for both new strings and edited strings

### React Key Management
The string rendering system uses a sophisticated key generation system to avoid React key conflicts:
- **Base Keys**: Include string ID, depth, index, and variable name
- **Nested Content**: Uses keyPrefix parameter to ensure uniqueness
- **Format**: `str-${stringId}-${depth}-${type}-${index}-${variableName}`

## Recent Functionality & UX Enhancements

### String Variables System
- **Two Variable Types**: Traditional trait variables + new string variables
- **String Variable Creation**: Checkbox in string dialog to create variables that reference the string
- **String Variable Display Control**: "Show String Variables" toggle controls rendering mode
- **Database Schema**: Added variable_type, referenced_string, is_conditional fields to Variable model
- **API Support**: Updated serializers and views to handle string variable creation and rendering

### Conditional Variables System
- **Replaced Conditional Blocks**: Old [[conditional]]...[[/]] system replaced with conditional variables
- **is_conditional Field**: Variables can be marked as conditional
- **UI Selector**: MultiSelect component for toggling conditional variables
- **Dynamic Rendering**: Strings update immediately when conditionals are toggled
- **Sidebar Indicators**: Conditional variables show purple "Conditional" badges in sidebar

### Project Management & UI
- Project Tiles (Homepage):
  - Entire tile (including padding) is now clickable to open the project, except for the overflow menu.
  - Overflow menu button uses ShadCN's rectangular Button with variant="secondary" and size="icon" for a modern, consistent look.
  - Overflow menu appears on hover or when open, and remains visible while interacting.
  - Overflow menu options: Edit Project, Download CSV, Delete Project (Duplicate Project is present but disabled).
  - Edit and Delete actions open dialogs; Download CSV triggers an immediate download for that project.
- Project Detail Page:
  - The same overflow menu (with the same options and style) is present next to the "Add String" button.
  - The standalone Download CSV button has been removed; it's now in the overflow menu.
  - Edit and Delete dialogs are reused here for consistency.

### Dialogs & Actions
- Edit Project:  
  - Opens a modal with the same fields as the create project form, pre-filled for editing.
  - Updates the project name/description via a PATCH request.
- Delete Project:  
  - Opens a confirmation dialog.
  - Deletes the project and removes it from the UI (redirects to homepage if on the project page).
- Download CSV:  
  - Uses the latest CSV logic, including all trait/conditional combinations.

### Variable Management Enhancements
- **Type Selection**: Dropdown to choose between 'trait' and 'string' variable types
- **String Reference**: For string variables, optional dropdown to select which string to reference
- **Conditional Checkbox**: Option to make any variable conditional
- **Sidebar Badges**: Visual indicators for variable types ("String Ref", "Conditional")
- **Smart Defaults**: New variables default to trait type

### Trait Management System
- **Comprehensive CRUD**: Full create, read, update, delete functionality for traits
- **Variable Value Management**: When editing traits, users can set values for all project variables
- **Smart Pre-population**: Edit dialogs automatically load existing variable values
- **Sidebar Integration**: Traits in sidebar are clickable to open edit dialogs
- **Form Validation**: Required trait names with proper error handling
- **Toast Notifications**: Success/error feedback for all operations

### CSV Export
- CSV export now includes a column for every combination of trait and conditional(s), with headers indicating the trait and which conditionals are enabled.

### UI/UX Improvements
- **Automatic Variable Detection**: When typing {{variable}} in string content, new variables are automatically created
- **String Variable Creation**: Easy workflow to create variables that reference strings
- **Real-time Rendering**: All display modes update immediately when toggles are changed
- **Consistent Key Generation**: Solved React key conflicts with sophisticated key generation system
- **Toast Notifications**: User feedback for all actions
- **Loading States**: Proper loading indicators for API operations

## Implementation Guidelines for Future Development

### State Management Patterns
- Use React useState for component-level state
- Implement proper cleanup in useEffect hooks
- Follow the established pattern of separate handlers for create vs edit operations
- Always reset form state when closing dialogs

### Variable System Guidelines
- **Always specify variable_type** when creating variables ('trait' or 'string')
- **String variables** should reference another string via referenced_string field
- **Trait variables** use VariableValue model for trait-specific values
- **Conditional variables** can be either type, marked with is_conditional=True

### String Rendering Guidelines
- **Use renderContentRecursively** for styled mode with proper keyPrefix for uniqueness
- **Use processStringContent** for plaintext mode
- **Respect toggle states**: showStringVariables, isPlaintext, selectedConditionalVariables
- **Handle nested string variables** by passing unique keyPrefix to prevent React key conflicts

### API Integration Best Practices
- Use consistent error handling with try/catch blocks
- Implement proper loading states for user feedback
- Follow RESTful conventions for endpoint design
- Use PATCH for updates, POST for creation, DELETE for removal
- **Always refresh project data** after creating variables or strings to get updated relationships

### Form Handling Patterns
- Pre-populate edit forms with existing data
- Implement proper validation before API calls
- Use controlled components for all form inputs
- Provide clear user feedback via toast notifications
- **Handle string variable creation** via checkbox in string dialogs

### Dialog Management
- Use boolean state variables for dialog visibility
- Implement separate open/close handler functions
- Clear form state when dialogs close
- Use descriptive dialog titles that reflect create vs edit mode

### Sidebar Integration
- Make all sidebar items clickable for quick access
- Use consistent styling for interactive elements
- Implement hover states for better UX
- Group related functionality logically
- **Show variable type badges** for quick identification

## Development: Activating the Backend Virtual Environment

To activate the Python virtual environment for the backend, use the following command from the project root:

    source backend/venv/bin/activate

Or, if you are already in the backend directory:

    source venv/bin/activate

Once activated, you can run Django management commands as needed.

## Development Setup & Commands

### Backend Setup
```bash
cd backend
source venv/bin/activate
pip install -r requirements.txt
python manage.py migrate
python manage.py runserver
```

### Frontend Setup
```bash
cd frontend
npm install
npm run dev
```

### Common Development Tasks
- **Database Migrations**: `python manage.py makemigrations` then `python manage.py migrate`
- **Create Superuser**: `python manage.py createsuperuser`
- **Install Frontend Dependencies**: `npm install <package-name>`
- **Add ShadCN Components**: `npx shadcn@latest add <component-name>`

## Current State & Known Issues

### Working Features
- ✅ String variables creation and rendering
- ✅ Conditional variables system
- ✅ Show String Variables toggle
- ✅ Both plaintext and styled rendering modes
- ✅ Automatic variable detection in string content
- ✅ React key conflict resolution
- ✅ Full CRUD for all entity types
- ✅ Real-time UI updates

### Technical Notes
- **Database migrations applied**: Variable model includes variable_type, referenced_string, is_conditional fields
- **API serialization**: Updated to handle string variables and conditional flags
- **Frontend state management**: Multiple toggle states coordinate string rendering
- **Key generation**: Uses sophisticated system to prevent React key conflicts in nested content

### Areas for Future Enhancement
- Performance optimization for large projects with many nested string variables
- Bulk operations for variables and strings
- Export formats beyond CSV
- Advanced conditional logic (AND/OR operations)
- Variable categories or namespacing
- Undo/redo functionality

## Testing & Quality Assurance

### Key Areas to Test
1. **Authentication Flow**: Login, logout, registration
2. **CRUD Operations**: All create, read, update, delete functionality
3. **String Rendering**: Variable substitution with all toggle combinations
4. **String Variables**: Creation, reference resolution, display modes
5. **Conditional Variables**: Selection, rendering, toggle behavior
6. **CSV Export**: Proper formatting with all trait/conditional combinations
7. **Real-time Updates**: UI responsiveness to state changes
8. **Form Validation**: Error handling and user feedback
9. **React Key Uniqueness**: No console errors for duplicate keys

### Testing Scenarios
- Create string variables both manually and via string dialog checkbox
- Test all combinations of trait selection, conditional selection, and display toggles
- Verify nested string variables render correctly without key conflicts
- Test CSV export with various conditional and trait combinations
- Ensure automatic variable detection works when typing in string content

### Browser Compatibility
- Ensure compatibility with modern browsers (Chrome, Firefox, Safari, Edge)
- Test responsive design on mobile and tablet devices
- Verify accessibility features work properly