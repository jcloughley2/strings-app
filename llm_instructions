# LLM Instructions for Strings App

## About This Document

**PURPOSE**: This document serves as a comprehensive reference guide for any LLM agent that needs to work on the Strings application. It contains everything needed to understand the app's purpose, architecture, functionality, and implementation patterns without requiring prior context.

**INTENDED AUDIENCE**: Future LLM agents who may need to:
- Develop new features for this application
- Debug or fix existing functionality
- Rebuild or significantly modify the application
- Understand the codebase structure and patterns
- Maintain consistency with established patterns

**MAINTENANCE REQUIREMENT**: This document MUST be kept up-to-date whenever changes are made to the application. Any developer (human or AI) working on this app has the responsibility to update this documentation to reflect their changes, ensuring future developers have accurate information.

**HOW TO USE**: Read through this document to understand the application before making any changes. Use the implementation guidelines to maintain consistency with existing patterns. Update this document immediately after making significant changes.

---

## Application Overview

**Application Name**: Strings  
**Purpose**: A web application for managing dynamic text content with conditional variables, traits, and organizational dimensions.

### What the Strings App Does

The Strings application allows users to create and manage dynamic text content that changes based on different contexts (traits) and conditions. Key functionality includes:

- **Project Management**: Users create projects to organize their content
- **String Management**: Define text strings that can contain variables (e.g., "The {{animal}} is {{color}}")
- **Variable System**: Two types of variables:
  - **Trait Variables**: Have different values for different traits (e.g., {{animal}} = "dog" for "Good" trait, "snake" for "Evil" trait)
  - **String Variables**: Reference other strings in the project (e.g., {{footer}} references a footer string)
- **Trait System**: Define contexts like "Good" and "Evil" that determine how trait variables are rendered
- **Conditional Variables**: Variables that can be toggled on/off to show/hide content dynamically
- **Dimension System**: Categorize strings with multiple values per dimension for organization and filtering
- **Export Functionality**: Download filtered CSV files containing only strings that match current filter state

### Example Use Case
A project with string "The {{animal}} is {{color}}" and traits "Good"/"Evil":
- Good trait: {{animal}} = "gerbil", {{color}} = "blue" → "The gerbil is blue"
- Evil trait: {{animal}} = "snake", {{color}} = "red" → "The snake is red"

## Application Architecture

### Frontend (Next.js 14)
- **Location**: `/frontend/`
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with ShadCN/UI components
- **State Management**: React useState and useEffect hooks
- **Authentication**: Cookie-based sessions with Django backend

### Backend (Django)
- **Location**: `/backend/`
- **Framework**: Django with Django REST Framework
- **Database**: SQLite (default Django setup)
- **Authentication**: Django's built-in session authentication
- **API**: RESTful endpoints with proper CORS configuration

## Data Models & Relationships

### Core Models

1. **Project**: Container for all user content
   - Fields: name, description, created_at, updated_at, user (foreign key)
   
2. **Trait**: Different contexts/modes for variable values
   - Fields: name, project (foreign key), created_at, updated_at
   
3. **Variable**: Reusable text placeholders with TWO TYPES:
   - **Trait Variables**: Traditional variables with different values per trait
   - **String Variables**: Variables that reference other strings in the project
   - Fields: name, project (foreign key), variable_type ('trait' or 'string'), referenced_string (foreign key, nullable), is_conditional (boolean), created_at, updated_at
   
4. **VariableValue**: Trait-specific values for TRAIT variables only
   - Fields: variable (foreign key), trait (foreign key), value, created_at, updated_at
   - Note: String variables don't use VariableValue - they reference strings directly
   
5. **String**: Main content with variables and conditionals
   - Fields: content, project (foreign key), created_at, updated_at
   
6. **Conditional**: Named conditional blocks within strings (DEPRECATED - now uses conditional variables)
   - Fields: name, project (foreign key), created_at, updated_at

7. **Dimension**: Categories for organizing/filtering strings
   - Fields: name, project (foreign key), created_at, updated_at
   - Constraints: unique_together = ['name', 'project'] (prevents duplicate dimension names within project)

8. **DimensionValue**: Predefined values for each dimension
   - Fields: dimension (foreign key), value, created_at, updated_at
   - Constraints: unique_together = ['dimension', 'value'] (prevents duplicate values within same dimension)

9. **StringDimensionValue**: Many-to-many relationship between strings and dimension values
   - Fields: string (foreign key), dimension_value (foreign key), created_at
   - Constraints: unique_together = ['string', 'dimension_value'] (prevents duplicate assignments)

### Variable Types Explained

1. **Trait Variables** (variable_type='trait'):
   - Have different values for each trait via VariableValue model
   - Traditional behavior: {{animal}} shows "dog" for trait A, "cat" for trait B
   
2. **String Variables** (variable_type='string'):
   - Reference another string in the project via referenced_string field
   - When rendered, they show the content of the referenced string
   - Can be created during string creation/editing with checkbox option
   - Example: {{footer}} might reference a string containing "Copyright 2024"

### Conditional Variables System

- Variables can be marked as conditional (is_conditional=True)
- Conditional variables appear in a special selector in the UI
- Users can toggle which conditional variables are "active"
- When a conditional variable is not selected, it's completely removed from string rendering
- This replaced the old [[conditional]] ... [[/]] block system

### Key Relationships

- Projects contain Traits, Variables, Strings, Conditionals, and Dimensions
- VariableValues link Variables to Traits with specific values (trait variables only)
- String variables link to other Strings via referenced_string field
- Strings can reference Variables via {{variable_name}} syntax
- Variables can be conditional and are toggled via UI selector
- Dimensions contain DimensionValues (one-to-many)
- Strings can be assigned DimensionValues via StringDimensionValue (many-to-many)
- Dimension names must be unique within a project
- DimensionValues must be unique within a dimension

## API Endpoints

### Authentication
- `POST /api/auth/login/` - Login with username/password
- `POST /api/auth/logout/` - Logout current user
- `POST /api/auth/register/` - Register new user
- `GET /api/auth/me/` - Get current user info

### Projects
- `GET /api/projects/` - List user's projects
- `POST /api/projects/` - Create new project
- `GET /api/projects/{id}/` - Get project details (includes all related data)
- `PATCH /api/projects/{id}/` - Update project
- `DELETE /api/projects/{id}/` - Delete project
- `POST /api/projects/{id}/download-csv/` - Download filtered CSV with current filter parameters

### Traits
- `GET /api/projects/{project_id}/traits/` - List project traits
- `POST /api/traits/` - Create new trait
- `PATCH /api/traits/{id}/` - Update trait
- `DELETE /api/traits/{id}/` - Delete trait

### Variables
- `GET /api/projects/{project_id}/variables/` - List project variables
- `POST /api/variables/` - Create new variable
  - Required: name, project, variable_type ('trait' or 'string')
  - Optional: referenced_string (for string variables), is_conditional (boolean)
- `PATCH /api/variables/{id}/` - Update variable
- `DELETE /api/variables/{id}/` - Delete variable

### Variable Values
- `GET /api/variables/{variable_id}/values/` - List variable values by trait
- `POST /api/variable-values/` - Create variable value for trait
- `PATCH /api/variable-values/{id}/` - Update variable value
- `DELETE /api/variable-values/{id}/` - Delete variable value

### Strings
- `GET /api/projects/{project_id}/strings/` - List project strings
- `POST /api/strings/` - Create new string
- `PATCH /api/strings/{id}/` - Update string
- `DELETE /api/strings/{id}/` - Delete string

### Dimensions
- `GET /api/dimensions/` - List user's dimensions (filtered by project access)
- `POST /api/dimensions/` - Create new dimension
  - Required: name, project
- `PATCH /api/dimensions/{id}/` - Update dimension
- `DELETE /api/dimensions/{id}/` - Delete dimension

### Dimension Values
- `GET /api/dimension-values/` - List dimension values (filtered by user access)
- `POST /api/dimension-values/` - Create new dimension value
  - Required: dimension, value
- `PATCH /api/dimension-values/{id}/` - Update dimension value
- `DELETE /api/dimension-values/{id}/` - Delete dimension value

### String Dimension Values
- `GET /api/string-dimension-values/` - List string-dimension-value relationships
  - Optional query param: `?string={string_id}` to filter by string
- `POST /api/string-dimension-values/` - Create new string-dimension-value relationship
  - Required: string, dimension_value
- `DELETE /api/string-dimension-values/{id}/` - Delete relationship

## User Interface Design

### Layout Structure

The application uses a sophisticated three-panel layout system optimized for content management:

#### Three-Panel Layout Structure:
- **Left Panel (Filter Sidebar)**: Fixed 360px wide sidebar containing filtering controls with independent scrolling
- **Center Panel (Main Canvas)**: Flexible width area displaying project strings and main content with independent scrolling
- **Right Panel (Variables Sidebar)**: Collapsible 360px wide sidebar for variable management with independent scrolling

#### Global Navigation
- **App Header**: Full-width header with app name "Strings" and user authentication controls (sticky at top)
- **Project Header**: Full-width header beneath global navigation containing:
  - Project name (left side) with proper typography hierarchy
  - Action buttons (right side): "Manage Variables", "Edit Project", and overflow menu
  - **Overflow Menu**: Contains "Download CSV" (with Upload icon) and "Delete Project" separated by menu divider
  - The "Download CSV" option opens a confirmation dialog for filtered export
  - The "Manage Variables" button toggles the collapsible variables sidebar
  - **Sticky positioning**: Remains visible while scrolling content below

### Left Panel: Filter Sidebar

Dedicated filtering controls with semantic icon system and hover interactions:

#### Dimensions Section
- **Purpose**: Filter strings by dimension values
- **Icon**: Globe icon with semantic meaning
- **Functionality**: 
  - One section per dimension with dimension name as header
  - Clickable badges for each dimension value (single selection per dimension)
  - "Clear" button appears when a value is selected
  - Plus icon in section header for creating new dimensions
  - Edit buttons appear on hover for dimension management
- **Behavior**: Only strings with matching dimension values are shown (AND logic across dimensions)

#### Traits Section  
- **Purpose**: Control variable rendering context
- **Icon**: SwatchBook icon with semantic meaning
- **Functionality**:
  - Radio button selection including "Blank (Variables)" as first option
  - All project traits listed with edit buttons appearing on hover
  - Plus icon for creating new traits
  - Single selection determines how trait variables are rendered in strings

#### Conditionals Section
- **Purpose**: Control conditional content visibility  
- **Icon**: Signpost icon with semantic meaning
- **Functionality**:
  - Individual checkboxes for each conditional variable
  - Edit buttons appear on hover for conditional variable management
  - Multiple selection supported
  - Section only appears if conditional variables exist
- **Behavior**: Selected conditionals show their content, unselected are hidden

#### Visual Design Features:
- Fixed width of 360px with `bg-muted/40` background
- Consistent spacing with ml-6 content indentation  
- Hover interactions with `hover:bg-muted/50` for interactive elements
- Edit buttons with smooth opacity transitions (opacity-0 to opacity-100 on group-hover)
- Professional visual hierarchy with clear section separation
- **Independent Scrolling**: Content area scrolls independently while "Filters" header remains sticky

### Center Panel: Main Canvas

Primary content area with streamlined controls and responsive design:

#### Canvas Header
- **Title**: "Project Strings" with proper typography hierarchy
- **Display Mode Controls**: Three toggle buttons with semantic color coding:
  1. **String Variables** (Green, `Spool` icon) - Controls string variable display mode
  2. **Highlight** (Yellow, `Highlighter` icon) - Controls plaintext vs badge mode 
  3. **Dimensions** (Blue, `Bookmark` icon) - Controls dimension tag visibility
- **Action Button**: "+ New String" button positioned at far right for optimal layout
- **Sticky positioning**: Header remains visible while scrolling through strings below

#### String Display Area
- **String Cards**: Clickable ShadCN Card components for each string
- **Interactive Elements**: 
  - Entire card is clickable to edit string content
  - **Always-visible overflow menu** (MoreHorizontal icon) with "Convert to string variable" and "Delete" options
  - Menu separator divides convert and delete actions for visual hierarchy
  - Variable badges in highlight mode with click prevention
  - Proper event handling (e.stopPropagation()) for nested interactions
- **String Conversion**: Overflow menu provides access to convert strings to string variables
  - Opens dedicated conversion dialog with variable name input
  - Shows string preview and conversion warnings
  - Deletes original string and creates new string variable upon confirmation
- **Responsive Design**: 
  - Conditional line height: `leading-normal` for plaintext, `leading-loose` for badge mode
  - Proper spacing between cards and consistent padding (px-6 throughout)
- **Empty States**: Intelligent messages for no strings vs no filtered matches
- **Independent Scrolling**: String list scrolls independently while canvas header remains sticky
- **Sort Order**: Newest strings appear at top, maintained across all operations

### Right Panel: Variables Sidebar (Collapsible)

Dedicated variable management panel with streamlined focus:

#### Sidebar Structure
- **Header**: Contains "Variables" title and X close button (sticky positioning)
- **Content**: Variables-only management (removed multi-tab system)
- **Footer**: "+ New Variable" button for creating variables
- **Behavior**: 
  - Collapsible drawer that pushes main content (not overlay)
  - Closed by default when entering project
  - Toggled via "Manage Variables" button in project header
  - Fixed width of 360px when open
- **Independent Scrolling**: Variables list scrolls independently while header remains sticky

#### Variable Management
- **Variable List**: All project variables with visual type indicators
  - **String Variables**: Green `Spool` icon badge
  - **Conditional Variables**: Purple `Signpost` icon badge
- **Interactions**: 
  - All variables clickable for editing
  - Hover-triggered delete icons (right side of each variable card) with opacity transitions
  - Proper event handling with `e.stopPropagation()` for delete buttons
- **Visual Design**: Consistent with filter sidebar hover patterns and spacing

### Bulk String Management System

The application includes comprehensive bulk editing functionality for efficient string management:

#### Bulk Selection Interface
- **Individual Checkboxes**: Each string card has a checkbox on the left side for individual selection
- **Secondary Header**: Appears above strings with "Select All" checkbox and selection count
- **Floating Action Bar**: Positioned at bottom center when strings are selected, showing count and delete button
- **Selection State**: Uses Set data structure for O(1) performance with helper functions

#### Bulk Selection Behavior
- **Smart Selection**: Selection automatically cleared when filters (traits/dimensions) change
- **Individual Updates**: Deleted/converted strings automatically removed from selection
- **Select All Logic**: Checkbox shows indeterminate state when partially selected
- **Count Display**: Real-time count of selected strings in secondary header and floating bar

#### Bulk Operations
- **Bulk Delete**: 
  - Confirmation dialog with selected string count
  - Parallel deletion using Promise.all for performance
  - Proper error handling with toast notifications
  - Automatic project refresh after completion
- **Selection Management**: Clear selection after operations or filter changes

#### Technical Implementation
- **State Management**: `selectedStringIds` Set, `bulkDeleteDialog` boolean state
- **Helper Functions**: `handleSelectString`, `handleSelectAll`, `clearSelection`
- **Event Handling**: Proper `stopPropagation()` for checkbox interactions
- **React Hooks Compliance**: All hooks placed at component top following React rules

### UI Component System

#### ShadCN Components Used
- **Dialog**: All create/edit forms with height constraints and scroll behavior
- **Button**: Consistent styling with variants (default, secondary, destructive, outline)
- **Input/Label**: Form inputs with proper accessibility and consistent spacing
- **Select**: Trait selection with SelectSeparator for "Blank" option
- **MultiSelect**: Conditional variables and dimension values selection (custom component)
- **DropdownMenu**: Overflow menus for project actions with proper styling
- **Badge**: Variable indicators, dimension values, and type indicators
- **Sonner**: Toast notifications for user feedback
- **Card**: String display with clickable interaction design

#### Key UI Patterns

1. **Toggle Button System**: 
   - Semantic color coding (green/yellow/blue) for different functions
   - Meaningful Lucide icons for visual recognition
   - Consistent `variant="outline"` styling with custom active themes

2. **Clickable Interface Elements**:
   - Project tiles and string cards are fully clickable surfaces
   - Variable cards in sidebar are fully clickable for editing
   - Proper event handling for nested interactive elements
   - Stop propagation for delete buttons on strings and variables
   - Hover-triggered delete icons on both string cards and variable cards

3. **Dialog System Enhancements**:
   - **Responsive Height Layout**: All major dialogs (strings, variables, dimensions) use `max-h-[80vh]` to adapt to content while preventing overflow
   - **Sticky Header/Footer**: Headers and footers remain fixed while content scrolls independently
        - **Structured Layout**: Fixed header (`px-6 py-4 border-b`), scrollable content (`flex-1 overflow-y-auto px-6 py-4`), fixed footer (`px-6 py-4 border-t`)
     - **String Dialog Tabs**: Uses ShadCN Tabs component in header for "Content" and "Dimensions" tabs, maintaining sticky navigation
     - **Auto-focus**: Content textarea automatically receives focus when string dialog opens
        - **Form Integration**: Submit buttons in footer use `form` attribute to work with forms in scrollable content
     - **Pre-populated forms** for edit operations with proper validation
     - **String Sorting**: All strings are sorted by creation date (newest first) using `sortProjectStrings()` helper function

4. **Form Standardization**:
   - Consistent `space-y-2` spacing between form elements
   - Proper Label components with `htmlFor`/`id` attributes
   - Helper text styling and error handling patterns

5. **Typography Hierarchy**:
   - App name: `text-2xl font-bold tracking-tight`
   - Project name: `text-xl font-semibold`  
   - Section headers: `text-lg font-semibold`
   - Clear visual distinction between hierarchy levels

6. **Consistent Padding System**:
   - Uniform 24px (`px-6`) padding across all headers and content areas
   - Applied to app header, project header, filter sidebar, strings canvas, and variables sidebar

## String Rendering System

The application features a sophisticated string rendering system that handles multiple display modes and variable types.

### Display Mode Controls

#### Show String Variables Toggle
**CRITICAL**: This toggle affects ONLY string variables, NOT trait variables:

- **When OFF (default state)**:
  - String variables: Show their actual content (referenced string content)
  - Trait variables: Show their trait-specific values (ALWAYS)
  
- **When ON**:
  - String variables: Display as {{variableName}} instead of expanding content
  - Trait variables: Continue to show their trait-specific values (UNCHANGED)

#### Highlight Toggle (Plaintext vs Styled Mode)
- **OFF (Plaintext Mode)**: Variables are replaced with their actual values as plain text
- **ON (Styled Mode - DEFAULT)**: Variables show as colored/grey badges with interaction

#### Dimensions Toggle
- **OFF**: Dimension tags are hidden from string display
- **ON**: Dimension tags show as blue badges below string content

### Rendering Behavior by Mode

#### Styled Mode (Highlight ON, Default):
- **Trait Variables**: Show as colored badges (green=has value, red=no value)
- **String Variables**: 
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as grey {{variable}} badges
- **Conditional Variables**: Only show if selected in conditionals selector

#### Plaintext Mode (Highlight OFF):
- **Trait Variables**: Replaced with trait-specific values or variable name if no value
- **String Variables**:
  - When showStringVariables=OFF: Show referenced string content
  - When showStringVariables=ON: Show as {{variable}} text
- **Conditional Variables**: Only show if selected in conditionals selector

#### Special Trait Selection Cases:
- **Blank Trait + showStringVariables=OFF**: String variables expand, trait variables show as {{variable}}
- **Blank Trait + showStringVariables=ON**: All variables show as {{variable}}
- **Selected Trait + showStringVariables=OFF**: String variables expand, trait variables show values
- **Selected Trait + showStringVariables=ON**: String variables show as badges, trait variables show values

### Technical Implementation

#### React Key Management
The system uses sophisticated key generation to avoid React conflicts:
- **Base Keys**: Include string ID, depth, index, and variable name
- **Nested Content**: Uses keyPrefix parameter to ensure uniqueness
- **Format**: `str-${stringId}-${depth}-${type}-${index}-${variableName}`

#### Rendering Functions
- **renderContentRecursively**: For styled mode with proper keyPrefix for uniqueness
- **processStringContent**: For plaintext mode
- **Recursive Handling**: Supports nested string variables by passing unique keyPrefix

## Filtering System

### Filter Logic
- **AND Operation**: All active filters must match for a string to be displayed
- **Dimension Filtering**: Single selection per dimension, strings without dimension values are hidden when filters active
- **Trait Filtering**: Affects variable rendering but doesn't filter strings
- **Conditional Filtering**: Multiple selection, affects content visibility within strings

### Empty States
- **No Strings**: "No strings created yet" when project has no strings
- **No Matches**: "No strings match the current filters" when filters eliminate all results
- **Smart Messaging**: Contextual messages based on filter state

## CSV Export System

The application provides a sophisticated filtered CSV export system that allows users to download only the strings that match their current filter state, rather than generating massive files with every possible combination.

### Export Functionality Overview

#### Filtered Export Approach
- **User-Controlled**: Only exports strings matching current UI filter state
- **Manageable Files**: Avoids massive exports by respecting active filters
- **Transparent Process**: Users see exactly what will be exported before confirming
- **Smart Processing**: Strings are rendered with the current trait/conditional selection

#### Export Button Location
- **Position**: Located in project header overflow menu as first option
- **Icon**: Upload icon from Lucide React (within menu)
- **Organization**: Separated from "Delete Project" option with menu separator
- **Behavior**: Opens confirmation dialog showing current filter state and string count

### Export Dialog System

#### Confirmation Dialog Features
- **Clear Communication**: Explains that export will contain only filtered strings
- **Current Filter Display**: Shows active dimension filters, trait selection, and conditional variables
- **String Count**: Displays exact number of strings to be exported
- **Smart Messaging**: Context-aware descriptions based on filter state
- **Cancel/Confirm**: Clear action buttons with loading states

#### Filter State Transparency
The dialog displays current filter state including:
- **Selected Trait**: Shows which trait is selected or "Blank (Variables)" mode
- **Dimension Filters**: Lists active dimension filters (e.g., "Type: Email, Platform: Web")
- **Conditional Variables**: Shows which conditional variables are enabled
- **Unfiltered State**: Clear messaging when no filters are active

#### User Experience Features
- **Loading States**: Button shows "Downloading..." during export process
- **Error Handling**: Proper error messages and toast notifications
- **File Naming**: Automatic filename format: `{ProjectName}_filtered_strings.csv`
- **Browser Download**: Standard browser download with proper headers

### Backend Export Processing

#### API Endpoint
- **Method**: `POST /api/projects/{id}/download-csv/`
- **Authentication**: Requires user authentication and project access
- **Parameters**: Accepts current filter state from frontend

#### Filter Parameters Accepted
```
{
  "trait_id": number|null,  // Selected trait ID or null for blank
  "selected_conditional_variables": number[],  // Array of conditional variable IDs
  "selected_dimension_values": number[]  // Array of selected dimension value IDs
}
```

#### String Processing Logic
The backend mirrors the frontend rendering logic exactly:

1. **Conditional Variable Processing**:
   - Variables not in `selected_conditional_variables` are completely removed from content
   - Selected conditional variables are processed normally

2. **Trait Variable Processing**:
   - If trait_id is provided: Show trait-specific values from VariableValue
   - If trait_id is null: Show variable names in {{variable}} format
   - If no value exists for trait: Show {{variable}} format

3. **String Variable Processing**:
   - Always expand string variables to their referenced content
   - Recursive processing for nested string variables

4. **Dimension Filtering**:
   - Only include strings that have ALL selected dimension values
   - Uses AND logic across all dimension filters
   - Strings without dimension assignments are excluded when filters are active

#### CSV Output Format
```
String ID,Original Content,Processed Content,Created At
1,"Hello {{name}}","Hello John","2024-01-01 12:00:00"
2,"The {{animal}} is {{color}}","The dog is blue","2024-01-01 12:05:00"
```

- **String ID**: Unique identifier for the string
- **Original Content**: Raw string content with variable placeholders
- **Processed Content**: String rendered with current filter state
- **Created At**: Timestamp when string was created

#### Technical Implementation
- **HTTP Response**: Proper CSV content-type headers
- **File Download**: Browser-compatible attachment headers
- **CSRF Protection**: Proper CSRF token handling in POST request
- **Error Handling**: Appropriate HTTP status codes and error messages

### Integration with Frontend State

#### Filter State Synchronization
- **Real-time Updates**: Export reflects current UI filter state
- **State Capture**: All filter values captured at time of export request
- **Consistency**: Backend processing matches frontend rendering exactly

#### Authentication Handling
- **Session Cookies**: Uses Django session authentication
- **CSRF Tokens**: Proper CSRF token transmission in POST headers
- **Permission Checks**: Verifies user access to project before export

#### Error Scenarios
- **Network Errors**: Proper error handling with user feedback
- **Authentication Issues**: Clear messaging for auth failures
- **Server Errors**: Graceful handling of backend processing failures
- **Empty Results**: Informative messaging when no strings match filters

### Use Cases and Benefits

#### Practical Export Scenarios
1. **Dimension-Specific Export**: Export only strings for specific platforms or types
2. **Trait-Specific Export**: Export strings rendered for specific trait context
3. **Conditional Content Export**: Export with specific conditional variables enabled
4. **Combined Filtering**: Multiple filter types for precise content selection

#### User Benefits
- **Relevant Content**: Only export needed strings, not every permutation
- **Manageable Files**: Avoid overwhelming CSV files with thousands of combinations
- **Predictable Output**: See exactly what will be exported before confirming
- **Flexible Filtering**: Use existing UI filters to control export scope

#### Technical Benefits
- **Performance**: Reduced server processing and file sizes
- **Scalability**: System remains usable even with large projects
- **Maintainability**: Single rendering logic shared between UI and export
- **User Experience**: Fast downloads with immediate feedback

## CSV Import System

The application provides comprehensive CSV import functionality for bulk string creation, complementing the export system.

### Import Functionality Overview

#### Bulk Import Approach
- **CSV-Based**: Each cell in uploaded CSV becomes a separate string
- **Variable Extraction**: Automatic detection and creation of variables using `{{variable}}` syntax
- **Smart Processing**: Creates new variables if they don't exist, reuses existing ones
- **File Validation**: CSV-only uploads with file size display

#### Import Dialog Features
- **Comprehensive Instructions**: Clear explanation of CSV format and variable handling
- **Visual Examples**: Shows expected input format and resulting output
- **Variable Syntax Guide**: Explains `{{variable}}` pattern for dynamic content
- **File Selection**: Drag-and-drop or click to select CSV files
- **Loading States**: Progress indicators during import processing

### Import Processing Logic

#### CSV Cell Processing
- **Individual Strings**: Each non-empty CSV cell becomes a separate string
- **Content Preservation**: Cell content used as-is for string content
- **Row/Column Agnostic**: Position in CSV doesn't affect string creation
- **Empty Cell Handling**: Skips empty cells during processing

#### Variable Management During Import
- **Automatic Detection**: Uses regex to find all `{{variable}}` patterns
- **Smart Creation**: Creates new variables if they don't exist in project
- **Variable Reuse**: Uses existing variables when names match
- **Type Assignment**: All imported variables are trait variables by default
- **Conditional Support**: Variables can be marked as conditional during creation

#### API Integration
- **Sequential Processing**: Creates variables first, then strings
- **Parallel Operations**: Uses Promise.all for performance optimization
- **Error Handling**: Specific error messages for different failure scenarios
- **Success Feedback**: Shows exact counts of created variables and strings
- **Project Refresh**: Automatic reload of project data after successful import

### Import Dialog Interface

#### File Selection Area
- **Visual Upload Zone**: Clear drag-and-drop target with file size display
- **File Validation**: Restricts to CSV files only with proper error messaging
- **Size Information**: Shows selected file size for user awareness
- **Replace Selection**: Can change file before confirming import

#### Instructions Section
- **Format Guidelines**: Explains CSV structure and processing behavior
- **Variable Syntax**: Details `{{variable}}` pattern with examples
- **Expected Outcomes**: Shows how CSV content becomes strings with variables
- **Best Practices**: Guidance for optimal import results

#### Processing Features
- **Loading States**: Import button shows "Importing..." during processing
- **Progress Feedback**: Real-time updates on creation progress
- **Error Recovery**: Graceful handling of partial failures
- **Completion Summary**: Detailed report of what was created

### Technical Implementation

#### Frontend Processing
- **File Reading**: Uses FileReader API for CSV content access
- **CSV Parsing**: Handles quoted values and various CSV formats
- **Variable Extraction**: `extractVariablesFromContent` helper function
- **State Management**: `importDialog`, `importFile`, `importLoading` states

#### Backend Integration
- **Variable Creation**: POST requests to `/api/variables/` endpoint
- **String Creation**: POST requests to `/api/strings/` endpoint
- **Transaction Safety**: Proper error handling prevents partial imports
- **Authentication**: Uses Django session authentication

#### Performance Considerations
- **Batch Processing**: Groups API calls for efficiency
- **Memory Management**: Processes large CSVs without overwhelming browser
- **User Feedback**: Maintains responsive UI during long imports
- **Error Boundaries**: Prevents crashes from malformed CSV files

### Use Cases and Benefits

#### Practical Import Scenarios
1. **Content Migration**: Moving existing content from other systems
2. **Bulk Content Creation**: Creating many strings at once from spreadsheets
3. **Template Import**: Importing pre-defined content templates
4. **Variable-Rich Content**: Content with many dynamic elements

#### User Benefits
- **Time Efficiency**: Create hundreds of strings in seconds
- **Variable Automation**: Automatic variable detection and creation
- **Flexible Input**: Standard CSV format works with any spreadsheet software
- **Smart Processing**: Intelligent handling of existing vs new variables

#### Technical Benefits
- **Scalable Creation**: Handle large content imports efficiently
- **Data Integrity**: Proper validation and error handling
- **User Experience**: Clear feedback and progress indication
- **Integration**: Seamless with existing project structure

## Form System and Data Management

### Variable Creation Workflows

1. **Manual Creation**: Via sidebar "New Variable" button with type selection
2. **Auto-Creation from Strings**: When {{newVariable}} is typed in string content
3. **String Conversion**: Via overflow menu on existing string cards
   - "Convert to string variable" option in string card overflow menu
   - Opens dedicated conversion dialog with variable name input
   - Shows string preview with conversion warnings
   - Creates string variable and deletes original string upon confirmation

### Text Selection and Variable Replacement

The string content editor includes smart text selection functionality for enhanced variable workflow:

#### Text Selection Detection
- **Real-time Monitoring**: Listens for text selection in string content textarea via `onSelect`, `onMouseUp`, and `onKeyUp` events
- **Selection State**: Tracks `selectedText`, `selectionStart`, and `selectionEnd` for replacement operations
- **Visual Feedback**: Blue notification box appears above variables section when text is selected

#### Selection Notification System
- **Message Display**: Shows selected text with truncation (up to 50 characters) in blue notification box
- **Clear Instructions**: Provides user guidance "Click a variable below to replace the selected text with that variable"
- **Dynamic Visibility**: Notification appears/disappears based on selection state

#### Variable Replacement Behavior
- **Smart Insertion Logic**: 
  - When text is selected: Replace selected text with chosen variable
  - When no selection: Insert variable at cursor position (existing behavior)
- **State Cleanup**: Clears selection state after replacement to prevent unintended operations
- **Cursor Management**: Positions cursor after inserted variable for continued editing

#### Technical Implementation
- **Event Handling**: Uses multiple event types to capture all selection methods (mouse, keyboard, programmatic)
- **State Management**: Maintains selection boundaries for precise text replacement
- **User Experience**: Seamless integration with existing variable insertion workflow

### Dimension Management System

#### Comprehensive CRUD Operations
- **Create**: New dimensions with validation for unique names within project
- **Read**: Display dimensions with their predefined values as grey badges in sidebar
- **Update**: Edit dimension names and manage dimension values
- **Delete**: Remove dimensions with proper cascade handling

#### Tag-Based Dimension Value Selection
- **Multiple Values per Dimension**: Strings can have multiple values for each dimension
- **Tag Display**: Selected values shown as removable gray badges with always-visible X buttons
- **Plus Button Interface**: Dashed-border plus button opens popover menu for adding values
- **Smart Filter Menu**: 
  - Auto-focused search input for filtering existing values or typing new ones
  - Scrollable list of available (unselected) dimension values
  - Dynamic "Create xyz" footer option when typing new values
  - One-click selection closes menu and applies value
- **Data Storage**: Multiple StringDimensionValue relationships per string per dimension

#### Validation Features
- **Unique Dimension Names**: Prevents duplicate dimension names within project (case-insensitive)
- **Unique Dimension Values**: Prevents duplicate values within same dimension (case-insensitive)
- **Database Constraints**: Backend enforces uniqueness via model constraints
- **Real-time Validation**: Toast notifications for validation errors

#### Display Features
- **String Cards**: Show dimension values as blue badges below content
- **Multi-Value Format**: "DimensionName: value1, value2, value3" (comma-separated)
- **Grouped Display**: Multiple values for same dimension combined into single badge
- **Consistent Styling**: `bg-gray-50 text-gray-700 border-gray-200` theme

## Development Guidelines and Patterns

### Authentication System Notes
- **Critical**: Frontend uses `/api/auth/me/` endpoint, not `/api/auth/user/`
- **Password Reset**: Uses `/api/auth/password/reset/` endpoint structure
- **Session Management**: Django sessions with proper CSRF handling
- **Error Handling**: Proper 404 handling for unauthenticated requests

### State Management Patterns
- Use React useState for component-level state
- Implement proper cleanup in useEffect hooks
- Follow established pattern of separate handlers for create vs edit operations
- Always reset form state when closing dialogs

### Variable System Guidelines
- **Always specify variable_type** when creating variables ('trait' or 'string')
- **String variables** should reference another string via referenced_string field
- **Trait variables** use VariableValue model for trait-specific values
- **Conditional variables** can be either type, marked with is_conditional=True

### String Rendering Guidelines
- **Use renderContentRecursively** for styled mode with proper keyPrefix for uniqueness
- **Use processStringContent** for plaintext mode
- **Respect toggle states**: showStringVariables, isPlaintext, selectedConditionalVariables
- **Handle nested string variables** by passing unique keyPrefix to prevent React key conflicts

### API Integration Best Practices
- Use consistent error handling with try/catch blocks
- Implement proper loading states for user feedback
- Follow RESTful conventions for endpoint design
- Use PATCH for updates, POST for creation, DELETE for removal
- **Always refresh project data** after creating variables or strings to get updated relationships
- **CSV Export**: Use POST method with filter parameters, include CSRF tokens for authentication

### Form Handling Patterns
- Pre-populate edit forms with existing data
- Implement proper validation before API calls
- Use controlled components for all form inputs
- Provide clear user feedback via toast notifications
- **Handle string variable creation** via checkbox in string dialogs

### Layout and Interaction Patterns

#### Three-Panel Layout Management
- **Filter Sidebar**: Fixed 360px width, never changes
- **Main Canvas**: Flexible width, adjusts when variables sidebar opens/closes
- **Variables Sidebar**: Fixed 360px when open, pushes content (no overlay)
- **Responsive Behavior**: Ensure layout works across different screen sizes

#### Hover Interaction System
- **Edit Button Pattern**: Opacity transitions (opacity-0 to opacity-100 on group-hover)
- **Consistent Application**: Used throughout filter sidebar and management interfaces
- **Semantic Icons**: Globe (Dimensions), SwatchBook (Traits), Signpost (Conditionals)

#### Dialog and Form Standards
- **Responsive Height Structure**: Major dialogs use `max-h-[80vh]` with three-section layout (header/content/footer) that adapts to content
- **Sticky Headers/Footers**: Use `DialogHeader` and `DialogFooter` with `px-6 py-4 border-b/border-t` styling
- **Scrollable Content**: Content section uses `flex-1 overflow-y-auto px-6 py-4` for independent scrolling
- **Form Integration**: Forms in content area with `form` attribute on submit buttons in footer
- **Consistent Spacing**: `space-y-2` between form elements
- **Proper Accessibility**: Label components with `htmlFor`/`id` attributes
- **Tab Navigation**: String dialog uses ShadCN Tabs for Content/Dimensions separation
- **Form Structure**: Form element wraps entire Tabs component to ensure Submit button works from any tab
- **Critical Bug Fix**: Form must encompass both Content and Dimensions tab content for proper button functionality
- **Auto-focus Behavior**: Content textarea receives immediate focus when string dialog opens
- **Sort Order**: Strings display in newest-first order using `sortProjectStrings()` helper

## Development Setup & Commands

### Backend Setup
```bash
cd backend
source venv/bin/activate  # Activate Python virtual environment
pip install -r requirements.txt
python manage.py migrate
python manage.py runserver  # Runs on port 8000
```

### Frontend Setup
```bash
cd frontend
npm install
npm run dev  # Runs on port 3000 (or next available port like 3001/3002)
```

### Common Development Tasks
- **Database Migrations**: `python manage.py makemigrations` then `python manage.py migrate`
- **Create Superuser**: `python manage.py createsuperuser`
- **Install Frontend Dependencies**: `npm install <package-name>`
- **Add ShadCN Components**: `npx shadcn@latest add <component-name>`

### Development Server Notes
- Backend runs on port 8000 by default
- Frontend auto-detects available ports (3000, 3001, 3002, etc.)
- CORS is configured for cross-origin requests between frontend and backend
- Hot reloading enabled for both frontend and backend development

## Current State & Features

### Fully Implemented Features ✅

#### Core Functionality
- ✅ **Authentication System**: Login, logout, registration with Django sessions (fixed endpoint mapping)
- ✅ **Project Management**: Full CRUD with overflow menus and project tiles
- ✅ **String Management**: Create, edit, delete strings with automatic variable detection
- ✅ **Variable System**: Both trait and string variables with proper type handling
- ✅ **Conditional Variables**: Replace old conditional blocks with toggle-based system
- ✅ **Trait Management**: Full CRUD with variable value management
- ✅ **Dimension System**: Complete implementation with multi-value assignment

#### Advanced String Rendering
- ✅ **Show String Variables Toggle**: Controls string variable display mode independently
- ✅ **Highlight/Plaintext Modes**: Badge vs text rendering with conditional line heights
- ✅ **Dimensions Toggle**: Show/hide dimension tags on strings
- ✅ **Nested Variable Support**: Recursive rendering with React key conflict resolution
- ✅ **Real-time Updates**: Immediate UI response to all toggle and selection changes

#### UI/UX Excellence
- ✅ **Three-Panel Layout**: Professional filter/content/management layout with independent scrolling
- ✅ **Semantic Toggle System**: Color-coded buttons with meaningful icons
- ✅ **Filter Sidebar**: Comprehensive filtering with dimension/trait/conditional controls
- ✅ **Variables Sidebar**: Collapsible management panel with push behavior
- ✅ **Clickable Interface**: Fully interactive cards and tiles with proper event handling
- ✅ **Form Standardization**: Consistent spacing, validation, and accessibility
- ✅ **Typography Hierarchy**: Clear visual distinction between content levels
- ✅ **Consistent Padding**: Uniform 24px spacing throughout application
- ✅ **Sticky Headers**: All section headers remain visible during content scrolling

#### Advanced Features
- ✅ **Bulk String Management**: Complete bulk selection and deletion system with smart state management
- ✅ **CSV Import System**: Comprehensive import functionality with automatic variable detection
- ✅ **Tag-Based Dimension Selection**: Intuitive tag display with popover add menu and smart filtering
- ✅ **Dimension Value Validation**: Prevents duplicates with real-time feedback
- ✅ **Filtered CSV Export**: Smart export system with current filter state transparency via overflow menu
- ✅ **Dialog Height Management**: Responsive `max-h-[80vh]` with content-adaptive sizing
- ✅ **String Dialog Tabs**: Separate Content/Dimensions tabs with sticky navigation and proper form structure
- ✅ **Text Selection Interface**: Smart variable replacement with visual feedback
- ✅ **String Overflow Menus**: Always-visible menu with convert/delete actions and separators
- ✅ **Chronological Ordering**: Newest-first string display with consistent sorting
- ✅ **Auto-focus UX**: Immediate focus on content textarea when creating strings
- ✅ **React Compliance**: Proper hooks order and state management following React best practices
- ✅ **Responsive Design**: Works across different screen sizes and devices
- ✅ **Professional Styling**: ShadCN components with custom enhancements

### Technical Achievements ✅

#### Database and API
- ✅ **Complete Data Model**: All entities with proper relationships and constraints
- ✅ **RESTful API**: Comprehensive endpoints with proper CORS and authentication
- ✅ **Database Migrations**: Properly versioned schema with constraint validation
- ✅ **Cascade Operations**: Proper handling of related data deletion and updates

#### Frontend Architecture  
- ✅ **Component System**: Reusable ShadCN components with custom modifications
- ✅ **State Management**: Proper React patterns with controlled components
- ✅ **Error Handling**: Comprehensive try/catch with user-friendly notifications
- ✅ **Performance**: Optimized rendering with proper key management

## Testing Guidelines

### Critical Test Areas

#### Authentication and Project Flow
1. **User Registration/Login**: Test complete authentication flow
2. **Project CRUD**: Create, edit, delete projects with proper navigation
3. **Project Tiles**: Clickable navigation and overflow menu functionality

#### Variable System Testing
1. **String Variables**: Creation via checkbox and manual creation
2. **Trait Variables**: Value assignment across different traits
3. **Conditional Variables**: Toggle functionality and content visibility
4. **Variable Type Icons**: Proper display of Spool and Signpost indicators

#### String Rendering Combinations
1. **Toggle Combinations**: Test all combinations of three toggle buttons
2. **Trait Selection**: Verify rendering changes with different trait selections
3. **Conditional Selection**: Multiple conditional variable combinations
4. **Nested Variables**: String variables referencing strings with variables

#### Text Selection and Variable Replacement Testing
1. **Selection Detection**: Test text selection via mouse, keyboard, and programmatic methods
2. **Notification Display**: Verify blue notification box appears/disappears correctly
3. **Variable Replacement**: Test replacing selected text with variables vs inserting at cursor
4. **State Management**: Ensure selection state clears after replacement
5. **Edge Cases**: Test with partial selections, multi-line selections, and empty selections

#### Dimension System Testing
1. **Multi-Value Assignment**: Assign multiple values per dimension to strings
2. **Validation**: Test duplicate prevention for names and values
3. **Filtering**: Single selection per dimension with AND logic
4. **Display**: Verify comma-separated format on string cards

#### Layout and Interaction Testing
1. **Three-Panel Layout**: Test with variables sidebar open/closed
2. **Filter Sidebar**: All filtering combinations and clear functionality
3. **Hover Interactions**: Edit buttons throughout filter sidebar
4. **Dialog Management**: Height constraints and scroll behavior
5. **Clickable Elements**: Cards, tiles, buttons with proper event handling

#### Form and Dialog Testing
1. **Pre-population**: Edit dialogs load existing data correctly
2. **Validation**: Required fields and duplicate prevention
3. **Real-time Updates**: UI reflects changes immediately
4. **Error Handling**: Proper feedback for failed operations

#### Bulk String Management Testing
1. **Selection Interface**: Test individual checkboxes and select all functionality
2. **Secondary Header**: Verify proper display of selection count and indeterminate states
3. **Floating Action Bar**: Test positioning and visibility with selected strings
4. **Smart Clearing**: Verify selection clears when filters change
5. **Bulk Operations**: Test bulk delete with confirmation and error handling
6. **State Management**: Ensure proper Set operations and React hooks compliance

#### CSV Import Testing
1. **File Upload**: Test CSV file selection and validation
2. **Variable Detection**: Verify automatic `{{variable}}` pattern recognition
3. **Variable Creation**: Test creation of new variables vs reusing existing ones
4. **String Creation**: Verify each CSV cell becomes individual string
5. **Error Handling**: Test malformed CSV files and API failures
6. **Progress Feedback**: Verify loading states and completion summaries

#### CSV Export Testing
1. **Filter State Accuracy**: Verify export matches current UI filter state exactly
2. **Dialog Functionality**: Test confirmation dialog with different filter combinations
3. **Overflow Menu Access**: Verify proper placement and separation in menu
4. **File Download**: Verify proper CSV format and filename generation
5. **Authentication**: Test export with proper session authentication
6. **Error Handling**: Test network failures and invalid filter states
7. **String Processing**: Verify conditional/trait/string variable processing matches UI rendering

#### String Dialog Form Testing
1. **Tab Functionality**: Test both Content and Dimensions tabs
2. **Form Structure**: Verify Submit button works from any tab
3. **Form Scope**: Ensure form element wraps entire Tabs component
4. **Bug Prevention**: Test that Update button responds from Dimensions tab
5. **Data Persistence**: Verify data maintains across tab switches

### Browser Compatibility
- **Modern Browsers**: Chrome, Firefox, Safari, Edge support
- **Responsive Design**: Mobile and tablet device compatibility
- **Accessibility**: Screen reader and keyboard navigation support

## Future Enhancement Areas

### Performance Optimization
- Bulk operations for variables and strings
- Lazy loading for large projects
- Optimized rendering for complex nested variables

### Feature Extensions
- Export formats beyond CSV (JSON, XML)
- Advanced conditional logic (AND/OR operations)
- Variable categories or namespacing
- Undo/redo functionality
- Project templates and cloning

### User Experience
- Keyboard shortcuts for common actions
- Advanced search and filtering
- Drag-and-drop reordering
- Collaborative editing features

---

**REMEMBER**: Keep this document updated with any changes made to the application. Future developers depend on accurate documentation to maintain and enhance the application effectively.